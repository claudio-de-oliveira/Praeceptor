@using Administrative.App.Components.Toaster
@using Administrative.App.Dialogs
@using Administrative.App.Interfaces
@using Administrative.App.Models
@using Ardalis.GuardClauses
@using Microsoft.AspNetCore.Mvc;
@using Newtonsoft.Json
@using PraeceptorCQRS.Contracts.Entities.ClassType
@using PraeceptorCQRS.Contracts.Entities.PreceptorRegimeType
@using Administrative.App.Components

@inherits AuthenticatedPage

<!-- Modal: Editar entidade -->
@if (EditDialogIsOpen)
{
    <EditRegimeTypeDialog Code="@previousCode" Code3="@previousCode3" OnClose="@OnEditDialogClose" />
}

<section class="p-1">
    <article class="content px-4">
        <table class="table table-sm" cellpadding="1" cellspacing="1">
            <tbody>
                @foreach (var entity in typeList)
                {
                    <tr>
                        <td><div style="font-size: smaller">@entity.Code (@entity.Code3)</div></td>
                        <td align="right" style="width: 80px;">
                            <button type="button"
                                class="btn btn-sm btn-edit"
                                    data-toggle="tooltip"
                                    data-placement="top"
                                    data-bs-toggle="modal"
                                    data-bs-target="#editRegimeTypeModal"
                                    title="Editar"
                                    disabled="@(!CanEdit(entity))"
                                    @onclick="@(() => Edit(entity))"
                                    >
                                <i class="bi bi-pencil"></i>
                                Editar
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <br />
        <div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
            <div class="btn-group" role="group" aria-label="First group">
                <button type="button"
                        class="btn btn-outline-primary"
                        data-toggle="tooltip"
                        data-placement="top"
                        data-bs-toggle="modal"
                        disabled="@(waiting || !CanCreate())"
                        title="Criar um novo tipo de regime de trabalho"
                        @onclick="() => OnCreate()">
                    <i class="bi bi-plus-slash-minus"></i>
                    Criar um novo tipo de regime de trabalho
                </button>
            </div>
        </div>
    </article>
</section>

@code {
    [Inject]
    private IInstituteService instituteService { get; set; } = default!;
    [Inject]
    private IPreceptorRegimeService typeService { get; set; } = default!;
    [Parameter]
    public Guid InstituteId { get; set; } = default!;

    protected List<PreceptorRegimeTypeModel> typeList = new();
    protected PreceptorRegimeTypeModel entitySelected = new();
    protected string previousCode = string.Empty;
    protected string previousCode3 = string.Empty;

    private Guid instituteId;
    private InstituteModel? institute;

    protected bool EditDialogIsOpen = false;

    protected bool waiting = true;
    protected bool created = false;

    protected override void OnInitialized()
    {
        instituteId = InstituteId;
        Guard.Against.Null(instituteId);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            institute = await instituteService.GetInstituteById(instituteId);
            await PageRequest();
        }
    }

    protected override bool CanCreate()
    {
        if (_isInstituteAdmin && _userInstituteId == InstituteId)
            return true;
        if (_isHoldingAdmin)
            return true;
        return base.CanCreate();
    }

    protected override bool CanEdit(Entity? institute)
    {
        if (institute is null)
            return false;
        if (_isInstituteAdmin && _userInstituteId == institute.Id)
            return true;
        if (_isHoldingAdmin)
            return true;
        return base.CanCreate();
    }

    protected async Task PageRequest()
    {
        waiting = true;
        var message = await typeService.PostPage(
            new GetPreceptorRegimeTypePageRequest(
                instituteId,
                0,
                int.MaxValue,
                "",
                false,
                "",
                "",
                "",
                "",
                ""
                )
            );

        if (message.IsSuccessStatusCode)
        {
            var tmp = JsonConvert.DeserializeObject<PageOfPreceptorRegimeTypeModel>(await message.Content.ReadAsStringAsync());
            Guard.Against.Null(tmp);
            typeList = tmp.Entities;
        }
        else
        {
            await OnHttpErrorMessage(message);

            typeList = new();
        }
        waiting = false;

        StateHasChanged();
    }

    protected void Edit(PreceptorRegimeTypeModel entity)
    {
        entitySelected = entity;
        previousCode = entitySelected.Code;
        previousCode3 = entitySelected.Code3;
        EditDialogIsOpen = true;
        StateHasChanged();
    }

    protected virtual void OnCreate()
    {
        created = true;

        entitySelected = new PreceptorRegimeTypeModel() { InstituteId = instituteId };
        previousCode = "";
        previousCode3 = "";
        EditDialogIsOpen = true;
        StateHasChanged();
    }

    protected async Task OnEditDialogClose(PreceptorRegimeTypeModel? modifiednewEntity)
    {
        if (modifiednewEntity is not null)
        {
            waiting = true;

            Guard.Against.Null(entitySelected);
            entitySelected.Code = modifiednewEntity.Code;
            entitySelected.Code3 = modifiednewEntity.Code3;
            HttpResponseMessage response;

            if (created)
            {
                response = await typeService.CreatePreceptorRegimeType(
                    new CreatePreceptorRegimeTypeRequest(
                        entitySelected.Code,
                        entitySelected.Code3,
                        instituteId
                        )
                    );
            }
            else
            {
                response = await typeService.UpdatePreceptorRegimeType(
                    new UpdatePreceptorRegimeTypeRequest(
                        entitySelected.Id,
                        entitySelected.Code,
                        entitySelected.Code3
                        )
                    );
            }

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                _toasterService?.AddToastSuccess("As modificações foram salvas.");
                previousCode = entitySelected.Code;
                previousCode3 = entitySelected.Code3;

                await PageRequest();
            }
            else
            {
                await OnHttpErrorMessage(response);

                entitySelected.Code = previousCode;
                entitySelected.Code3 = previousCode3;
            }

            waiting = false;
        }

        EditDialogIsOpen = false;

        StateHasChanged();
    }
}
