@using Administrative.App.Components
@using Administrative.App.Components.Toaster
@using Administrative.App.Interfaces
@using Administrative.App.Models
@using Administrative.App.Dialogs
@using Ardalis.GuardClauses
@using Microsoft.AspNetCore.Mvc;
@using Newtonsoft.Json
@using PraeceptorCQRS.Contracts.Entities.Course

@implements IDisposable

@inherits AuthenticatedPage

<!-- Modal: Editar entidade -->
@if (EditDialogIsOpen)
{
    <EditCourseDialog Code="@previousCode"
                  Name="@previousName" 
                  AC="@previousAC" NumberOfSeasons="@previousSeasons" MinimumWorkload="@previousMinimumWorkload" Telephone="@previousTelephone"
                  Email="@previousEmail" Image="@previousImage"
                  IsCourseAdmin="@_isCourseAdmin"
                  Create="@created"
                  OnClose="@OnEditDialogClose" />
}

<section class="p-1">

    <article class="content px-4">
        <table class="table table-sm" cellpadding="1" cellspacing="1">


            <thead>
                <tr>
                    <td align="center">
                        <ClearableInputTextComponent Placeholder="Filtrar por Código" Filter="@codeFilter" Waiting="@waiting" OnTextChange="@OnCodeChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center">
                        <ClearableInputTextComponent Placeholder="Filtrar por Nome" Filter="@nameFilter" Waiting="@waiting" OnTextChange="@OnNameChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center">
                        <ClearableInputTextComponent Placeholder="Filtrar por Atividades Complementares" Filter="@acFilter" Waiting="@waiting" OnTextChange="@OnNameChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center">
                        <ClearableInputTextComponent Placeholder="Filtrar por Períodos" Filter="@seasonsFilter" Waiting="@waiting" OnTextChange="@OnSeasonsChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center">
                        <ClearableInputTextComponent Placeholder="Filtrar por Carga Horária Mínima" Filter="@minimumWorkloadFilter" Waiting="@waiting" OnTextChange="@OnMinimumWorkloadChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center"></td>
                    <td align="center"></td>
                    <td align="center"></td>
                </tr>
                <!---->
                <tr>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Código" SortBy="Code" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Nome" SortBy="Name" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="AC" SortBy="AC" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Módulos" SortBy="Seasons" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="C.H.M" SortBy="MinimumWorkload" OnClick="@SortBy" />
                    </td>
                    <th></th>
                    <th></th>
                    <th></th>
                </tr>
                <!---->
            </thead>
            <tbody>
                @foreach (var entity in courseList)
                {
                    <tr>
                        <td align="center"><div style="font-size: smaller">@entity.Code</div></td>
                        <td><div style="font-size: smaller">@entity.Name</div></td>
                        <td align="center"><div style="font-size: smaller">@entity.AC</div></td>
                        <td align="center"><div style="font-size: smaller">@entity.NumberOfSeasons</div></td>
                        <td align="center"><div style="font-size: smaller">@entity.MinimumWorkload</div></td>
                        <td align="right" style="width: 80px;">
                            <button type="button"
                                class="btn btn-sm btn-primary"
                                data-toggle="tooltip"
                                data-placement="top"
                                title="Corpo social"
                                @onclick="@(() => Administration(entity))"
                                style="border: none;">
                                Administração
                            </button>
                        </td>
                        <td align="right" style="width: 80px;">
                            <button type="button"
                                class="btn btn-sm btn-success"
                                data-toggle="tooltip"
                                data-placement="top"
                                title="Estrutura curricular"
                                disabled="@(!CanViewDetails(entity))"
                                @onclick="@(() => Details(entity))"
                                style="border: none;">
                                Matriz
                            </button>
                        </td>
                        <td align="right" style="width: 80px;">
                            <button type="button"
                                class="btn btn-sm btn-warning"
                                data-toggle="tooltip"
                                data-placement="top"
                                data-bs-toggle="modal"
                                data-bs-target="#editChapterModal"
                                title="Editar"
                                disabled="@(!CanEdit(entity))"
                                @onclick="@(() => Edit(entity))"
                                style="border: none;">
                                Editar
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <br />
        <div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
            <div class="btn-group" role="group" aria-label="First group">
                <button type="button"
                        class="btn btn-outline-primary"
                        data-toggle="tooltip"
                        data-placement="top"
                        data-bs-toggle="modal"
                        disabled="@(waiting || !CanCreate())"
                        title="Criar um novo curso"
                        @onclick="() => OnCreate()">
                    <i class="bi bi-plus-slash-minus"></i>
                    Criar um novo curso
                </button>
            </div>

            <PageNavigationComponent CurrentPage="@currentPage" NumberOfPages="@numberOfPages" GotoPage="@OnPageChange"></PageNavigationComponent>

        </div>
    </article>
</section>

@code {
    [Inject]
    private IInstituteService instituteService { get; set; } = default!;
    [Inject]
    protected NavigationManager navigationManager { get; set; } = default!;
    [Inject]
    private IPreceptorService preceptorService { get; set; } = default!;
    [Inject]
    protected IAdminService adminService { get; set; } = default!;
    [Inject]
    private ICourseService courseService { get; set; } = default!;
    [Parameter]
    public Guid InstituteId { get; set; } = default!;

    protected List<CourseModel> courseList = new();
    protected bool _viewDetails = false;
    protected CourseModel entitySelected = new();
    protected string previousCode = string.Empty;
    protected string previousName = string.Empty;

    protected int previousAC;
    protected int previousSeasons;
    protected int previousMinimumWorkload;
    protected string? previousTelephone;
    protected string? previousEmail;
    protected string? previousImage;

    private Guid instituteId;
    private InstituteModel? institute;

    protected bool EditDialogIsOpen = false;

    private readonly int pageSize = 10;
    protected int currentPage = 0;
    protected int previousPage = -1;
    protected int nextPage = -1;
    protected int numberOfPages = 0;

    protected bool waiting = true;
    protected bool created = false;

    protected bool ascendingSort = false;
    protected string? sort = "LastModified";
    protected string? codeFilter = "";
    protected string? nameFilter = "";
    protected Guid? ceoFilter;
    protected string? acFilter = "";
    protected string? seasonsFilter = "";
    protected string? minimumWorkloadFilter = "";
    protected string? createdFilter = "";
    protected string? createdByFilter = "";
    protected string? lastModifiedFilter = "";
    protected string? lastModifiedByFilter = "";


    protected string TextToDisplay(string? text, int maxLength = 200)
        => text is not null && text.Length < maxLength ? text : text?.Substring(0, maxLength) + "...";

    protected override void OnInitialized()
    {
        instituteId = InstituteId;
        Guard.Against.Null(instituteId);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            institute = await instituteService.GetInstituteById(instituteId);
            await PageRequest(currentPage);
        }
    }

    protected override bool CanCreate()
    {
        if (_isInstituteAdmin && _userInstituteId == InstituteId)
            return true;
        if (_isHoldingAdmin)
            return true;
        return base.CanCreate();
    }

    protected override bool CanEdit(Entity? course)
    {
        if (course is null)
            return false;
        if (_isCourseAdmin && _userCourseId == course.Id)
            return true;
        if (_isInstituteAdmin && _userInstituteId == InstituteId)
            return true;
        if (_isHoldingAdmin)
            return true;
        return base.CanCreate();
    }

    protected async Task OnPageChange(int page)
    {
        await PageRequest(page);
    }

    protected async Task PageRequest(int page)
    {
        waiting = true;
        var message = await courseService.PostPage(
            new GetCoursePageRequest(
                instituteId,
                page,
                pageSize,
                sort,
                ascendingSort,
                codeFilter,
                nameFilter,
                !string.IsNullOrWhiteSpace(acFilter) ? int.Parse(acFilter) : -1,
                !string.IsNullOrWhiteSpace(seasonsFilter) ? int.Parse(seasonsFilter) : -1,
                !string.IsNullOrWhiteSpace(minimumWorkloadFilter) ? int.Parse(minimumWorkloadFilter) : -1,
                createdFilter,
                createdByFilter,
                lastModifiedFilter,
                lastModifiedByFilter
                )
            );

        if (message.IsSuccessStatusCode)
        {
            var content = await message.Content.ReadAsStringAsync();
            var tmp = JsonConvert.DeserializeObject<PageOfCourseModel>(content);
            Guard.Against.Null(tmp);
            courseList = tmp.Entities.Select(o => (CourseModel)o).ToList();
            currentPage = tmp.CurrentPage;
            previousPage = tmp.PreviousPage;
            nextPage = tmp.NextPage;
            numberOfPages = tmp.NumberOfPages;
        }
        else
        {
            await OnHttpErrorMessage(message);
        }
        waiting = false;

        StateHasChanged();
    }

    protected void Edit(CourseModel entity)
    {
        created = false;

        entitySelected = entity;
        previousCode = entitySelected.Code;
        previousName = entitySelected.Name;
        previousAC = entitySelected.AC;
        previousSeasons = entitySelected.NumberOfSeasons;
        previousMinimumWorkload = entitySelected.MinimumWorkload;
        previousTelephone = entitySelected.Telephone;
        previousEmail = entitySelected.Email;
        previousImage = entitySelected.Image;

        EditDialogIsOpen = true;
        StateHasChanged();
    }

    protected virtual void OnCreate()
    {
        created = true;

        entitySelected = new CourseModel() { InstituteId = instituteId };
        previousCode = "";
        previousName = "";
        previousAC = 0;
        previousSeasons = 0;
        previousMinimumWorkload = 0;
        previousTelephone = "";
        previousEmail = "";
        previousImage = "";
        EditDialogIsOpen = true;
        StateHasChanged();
    }

    protected async Task Create(CourseModel course)
    {
        var response = await courseService.CreateCourse(
            new CreateCourseRequest(
                course.Code,
                course.Name,
                course.AC,
                course.NumberOfSeasons,
                course.MinimumWorkload,
                course.Telephone,
                course.Email,
                course.Image,
                instituteId
                )
            );

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadAsStringAsync();
            var courseCreated = JsonConvert.DeserializeObject<CourseModel>(result);
            Guard.Against.Null(courseCreated);

            await PageRequest(currentPage);

            _toasterService?.AddToastSuccess("As modificações foram salvas.");

            Guard.Against.Null(entitySelected);
            entitySelected.Code = course.Code;
            entitySelected.Name = course.Name;
            entitySelected.AC = course.AC;
            entitySelected.NumberOfSeasons = course.NumberOfSeasons;
            entitySelected.MinimumWorkload = course.MinimumWorkload;
            entitySelected.Telephone = course.Telephone;
            entitySelected.Email = course.Email;
            entitySelected.Image = course.Image;
        }
        else
        {
            await OnHttpErrorMessage(response);
        }
    }

    protected async Task Update(CourseModel course)
    {
        var response = await courseService.UpdateCourse(
                    new UpdateCourseRequest(
                        course.Id,
                        course.Name,
                        course.AC,
                        course.NumberOfSeasons,
                        course.MinimumWorkload,
                        course.Telephone,
                        course.Email,
                        course.Image
                        )
                    );

        if (response.IsSuccessStatusCode)
        {
            await PageRequest(currentPage);

            Guard.Against.Null(entitySelected);
            entitySelected.Code = course.Code;
            entitySelected.Name = course.Name;
            entitySelected.AC = course.AC;
            entitySelected.NumberOfSeasons = course.NumberOfSeasons;
            entitySelected.MinimumWorkload = course.MinimumWorkload;
            entitySelected.Telephone = course.Telephone;
            entitySelected.Email = course.Email;
            entitySelected.Image = course.Image;
        }
        else
        {
            await OnHttpErrorMessage(response);

            entitySelected.Code = previousCode;
            entitySelected.Name = previousName;
            entitySelected.AC = previousAC;
            entitySelected.NumberOfSeasons = previousSeasons;
            entitySelected.MinimumWorkload = previousMinimumWorkload;
            entitySelected.Telephone = previousTelephone;
            entitySelected.Email = previousEmail;
            entitySelected.Image = previousImage;
        }
    }

    protected async Task OnEditDialogClose(CourseModel? modifiednewEntity)
    {
        if (modifiednewEntity is not null)
        {
            waiting = true;

            modifiednewEntity.Id = entitySelected.Id;
            modifiednewEntity.InstituteId = entitySelected.InstituteId;

            if (created)
                await Create(modifiednewEntity);
            else
                await Update(modifiednewEntity);

            waiting = false;

        }

        EditDialogIsOpen = false;

        StateHasChanged();
    }

#pragma warning disable CS8602
    protected async Task OnCodeChanged(string? text)
    {
        codeFilter = text;
        await PageRequest(0);
    }
    protected async Task OnNameChanged(string? text)
    {
        nameFilter = text;
        await PageRequest(0);
    }
    protected async Task OnSeasonsChanged(string? text)
    {
        seasonsFilter = text;
        await PageRequest(0);
    }
    protected async Task OnMinimumWorkloadChanged(string? text)
    {
        minimumWorkloadFilter = text;
        await PageRequest(0);
    }
    protected async Task OnCreatedChanged(ChangeEventArgs args)
    {
        createdFilter = args.Value.ToString();
        await PageRequest(0);
    }
    protected async Task OnCreatedByChanged(ChangeEventArgs args)
    {
        createdByFilter = args.Value.ToString();
        await PageRequest(0);
    }
    protected async Task OnLastModifiedChanged(ChangeEventArgs args)
    {
        lastModifiedFilter = args.Value.ToString();
        await PageRequest(0);
    }
    protected async Task OnLastModifiedByChanged(ChangeEventArgs args)
    {
        lastModifiedByFilter = args.Value.ToString();
        await PageRequest(0);
    }
#pragma warning restore CS8602

    protected async void SortBy(string SortColumn)
    {
        ascendingSort = !ascendingSort;
        sort = SortColumn;
        await PageRequest(currentPage);
    }

    private async Task<bool> CreateAdmin(string id, string admin, string email, string role)
    {
        var result = await adminService.CreateAdmin(new PraeceptorCQRS.Contracts.Entities.Admin.CreateAdminRequest(
            admin,
            email,
            'M', // GENDER
            default!, // PHONENUMBER
            id,
            role
        ));

        return result.IsSuccessStatusCode;
    }

    protected void Details(CourseModel? entity)
    {
        Guard.Against.Null(entity);
        navigationManager.NavigateTo($"/course/matrix/{instituteId}/{entity.Id}");
    }

    protected void Administration(CourseModel? entity)
    {
        Guard.Against.Null(entity);
        navigationManager.NavigateTo($"/course/preceptors/{instituteId}/{entity.Id}");
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
    }
}
