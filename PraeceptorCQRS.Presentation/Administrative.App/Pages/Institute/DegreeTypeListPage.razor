@using Administrative.App.Components.Toaster
@using Administrative.App.Dialogs
@using Administrative.App.Interfaces
@using Administrative.App.Models
@using Ardalis.GuardClauses
@using Microsoft.AspNetCore.Mvc;
@using Newtonsoft.Json
@using PraeceptorCQRS.Contracts.Entities.ClassType
@using PraeceptorCQRS.Contracts.Entities.PreceptorDegreeType
@using Administrative.App.Components

@inherits AuthenticatedPage

<!-- Modal: Editar entidade -->
@if (EditDialogIsOpen)
{
    <EditDegreeTypeDialog Code="@previousCode" LatoSensu=@previousLatoSensu StrictoSensu=@previousStrictoSensu OnClose="@OnEditDialogClose" />
}

<section class="p-1">
    <article class="content px-4">
        <table class="table table-sm" cellpadding="1" cellspacing="1">
            <tbody>
                @foreach (var entity in typeList)
                {
                    <tr>
                        <td><div style="font-size: smaller">@entity.Code</div></td>
                        <td align="right" style="width: 80px;">
                            <button type="button"
                                    class="btn btn-sm btn-warning"
                                    data-toggle="tooltip"
                                    data-placement="top"
                                    data-bs-toggle="modal"
                                    data-bs-target="#editDegreeTypeModal"
                                    title="Editar"
                                    disabled="@(!CanEdit(entity))"
                                    @onclick="@(() => Edit(entity))"
                                    style="border: none;">
                                Editar
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <br />
        <div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
            <div class="btn-group" role="group" aria-label="First group">
                <button type="button"
                        class="btn btn-outline-primary"
                        data-toggle="tooltip"
                        data-placement="top"
                        data-bs-toggle="modal"
                        disabled="@(waiting || !CanCreate())"
                        title="Criar um novo tipo de titulação"
                        @onclick="() => OnCreate()">
                    <i class="bi bi-plus-slash-minus"></i>
                    Criar um novo tipo de titulação
                </button>
            </div>
        </div>
    </article>
</section>

@code {
    [Inject]
    private IInstituteService instituteService { get; set; } = default!;
    [Inject]
    private IPreceptorDegreeService typeService { get; set; } = default!;
    [Parameter]
    public Guid InstituteId { get; set; } = default!;

    protected List<PreceptorDegreeTypeModel> typeList = new();
    protected PreceptorDegreeTypeModel entitySelected = new();

    protected string previousCode = string.Empty;
    protected bool previousLatoSensu = false;
    protected bool previousStrictoSensu = false;

    private Guid instituteId;
    private InstituteModel? institute;

    protected bool EditDialogIsOpen = false;

    protected bool waiting = true;
    protected bool created = false;

    protected override void OnInitialized()
    {
        instituteId = InstituteId;
        Guard.Against.Null(instituteId);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            institute = await instituteService.GetInstituteById(instituteId);
            await PageRequest();
        }
    }

    protected override bool CanCreate()
    {
        if (_isInstituteAdmin && _userInstituteId == InstituteId)
            return true;
        if (_isHoldingAdmin)
            return true;
        return base.CanCreate();
    }

    protected override bool CanEdit(Entity? institute)
    {
        if (institute is null)
            return false;
        if (_isInstituteAdmin && _userInstituteId == institute.Id)
            return true;
        if (_isHoldingAdmin)
            return true;
        return base.CanCreate();
    }

    protected async Task PageRequest()
    {
        waiting = true;
        var message = await typeService.PostPage(
            new GetPreceptorDegreeTypePageRequest(
                instituteId,
                0,
                int.MaxValue,
                "",
                false,
                "",
                "",
                "",
                "",
                ""
                )
            );

        if (message.IsSuccessStatusCode)
        {
            var tmp = JsonConvert.DeserializeObject<PageOfPreceptorDegreeTypeModel>(await message.Content.ReadAsStringAsync());
            Guard.Against.Null(tmp);
            typeList = tmp.Entities;
        }
        else
        {
            var result = await message.Content.ReadAsStringAsync();
            var error = JsonConvert.DeserializeObject<ProblemDetails>(result);
            Guard.Against.Null(error);
            Guard.Against.Null(error.Title);
            _toasterService?.AddToastError(error.Title);
        }
        waiting = false;

        StateHasChanged();
    }

    protected void Edit(PreceptorDegreeTypeModel entity)
    {
        entitySelected = entity;
        previousCode = entitySelected.Code;
        previousLatoSensu = entitySelected.LatoSensu;
        previousStrictoSensu = entitySelected.StrictoSensu;
        EditDialogIsOpen = true;
        StateHasChanged();
    }

    protected virtual void OnCreate()
    {
        created = true;

        entitySelected = new PreceptorDegreeTypeModel() { InstituteId = instituteId };
        previousCode = "";
        previousLatoSensu = false;
        previousStrictoSensu = false;
        EditDialogIsOpen = true;
        StateHasChanged();
    }

    protected async Task OnEditDialogClose(PreceptorDegreeTypeModel? modifiednewEntity)
    {
        if (modifiednewEntity is not null)
        {
            waiting = true;

            Guard.Against.Null(entitySelected);
            entitySelected.Code = modifiednewEntity.Code;
            previousLatoSensu = modifiednewEntity.LatoSensu;
            previousStrictoSensu = modifiednewEntity.StrictoSensu;
            HttpResponseMessage response;

            if (created)
            {
                response = await typeService.CreatePreceptorDegreeType(
                    new CreatePreceptorDegreeTypeRequest(
                        entitySelected.Code,
                        entitySelected.LatoSensu,
                        entitySelected.StrictoSensu,
                        instituteId
                        )
                    );
            }
            else
            {
                response = await typeService.UpdatePreceptorDegreeType(
                    new UpdatePreceptorDegreeTypeRequest(
                        entitySelected.Id
                        )
                    );
            }

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                _toasterService?.AddToastSuccess("As modificações foram salvas.");
                previousCode = entitySelected.Code;
                previousLatoSensu = entitySelected.LatoSensu;
                previousStrictoSensu = entitySelected.StrictoSensu;

                await PageRequest();
            }
            else
            {
                var result = await response.Content.ReadAsStringAsync();
                var error = JsonConvert.DeserializeObject<ProblemDetails>(result);
                Guard.Against.Null(error);
                Guard.Against.Null(error.Title);
                _toasterService?.AddToastError(error.Title);

                entitySelected.Code = previousCode;
                entitySelected.LatoSensu = previousLatoSensu;
                entitySelected.StrictoSensu = previousStrictoSensu;
            }

            waiting = false;
        }

        EditDialogIsOpen = false;

        StateHasChanged();
    }
}
