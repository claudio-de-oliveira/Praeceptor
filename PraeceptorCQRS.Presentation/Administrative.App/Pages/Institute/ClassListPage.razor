@using Administrative.App.Components.Toaster
@using Administrative.App.Interfaces
@using Administrative.App.Models
@using Ardalis.GuardClauses
@using Microsoft.AspNetCore.Mvc
@using Newtonsoft.Json
@using PraeceptorCQRS.Contracts.Entities.Class
@using PraeceptorCQRS.Contracts.Entities.ClassType
@using PraeceptorCQRS.Contracts.Entities.Course
@using Administrative.App.Components
@using Administrative.App.Dialogs

@implements IDisposable

@inherits AuthenticatedPage

<!-- Modal: Editar entidade -->
@if (EditDialogIsOpen)
{
    <EditClassDialog Code="@previousCode" Name="@previousName" Practice="@previousPractice" Theory="previousTheory" PR="previousPR"
                 TypeId="@previousTypeId" OnClose="@OnEditDialogClose" Options="@classTypeList" />
}

<section class="p-1">
    <article class="content px-4">
        <table class='table'>
            <thead>
                <tr>
                    <td align="center">
                        <ClearableInputTextComponent Placeholder="Filtrar por Código" Filter="@codeFilter" Waiting="@waiting" OnTextChange="@OnCodeChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center">
                        <ClearableInputTextComponent Placeholder="Filtrar por Nome" Filter="@nameFilter" Waiting="@waiting" OnTextChange="@OnNameChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center">
                        <ClearableInputTextComponent Placeholder="Filtrar por Créditos Práticos" Filter="@practiceFilter" Waiting="@waiting" OnTextChange="@OnPracticeChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center">
                        <ClearableInputTextComponent Placeholder="Filtrar por Créditos Teóricos" Filter="@theoryFilter" Waiting="@waiting" OnTextChange="@OnTheoryChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center">
                        <ClearableInputTextComponent Placeholder="Filtrar por Créditos Pré-Requisitos" Filter="@prFilter" Waiting="@waiting" OnTextChange="@OnPRChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center">
                        <SelectTextComponent Waiting="@waiting" Options="@classTypeList" OnTextChange="OnTypeChanged"></SelectTextComponent>
                    </td>
                    <td align="center"></td>
                    <td align="center"></td>
                </tr>
                <!---->
                <tr>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Código" SortBy="Code" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Nome" SortBy="Name" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="C.P." SortBy="Practice" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="C.T." SortBy="Theory" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="PR" SortBy="PR" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Tipo" SortBy="Type" OnClick="@SortBy" />
                    </td>
                    <th></th>
                    <th></th>
                </tr>
                <!---->
            </thead>
            <tbody>
                @foreach (var entity in classList)
                {
                    <tr>
                        <td>@entity.Code</td>
                        <td>@entity.Name</td>
                        <td>@entity.Practice</td>
                        <td>@entity.Theory</td>
                        <td>@entity.PR</td>
                        <td>@classTypeList[entity.TypeId]</td>
                        <td align="center">
                            <button type="button"
                                class="btn btn-outline-info"
                                data-toggle="tooltip"
                                data-placement="top"
                                title="Ver detalhes"
                                disabled = "@(!CanViewDetails(entity))"
                                @onclick="@(() => Details(entity))"
                                style="border: none;">
                                <i class="bi bi-diagram-3"></i>
                            </button>
                        </td>
                        <td align="center">
                            <button type="button"
                                class="btn btn-sm btn-outline-warning"
                                data-toggle="tooltip"
                                data-placement="top"
                                data-bs-toggle="modal"
                                data-bs-target="#editChapterModal"
                                title="Editar"
                                disabled = "@(!CanEdit(entity))"
                                @onclick="@(() => Edit(entity))"
                                style="border: none;">
                                <i class="bi bi-pencil"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <br />
        <div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
            <div class="btn-group" role="group" aria-label="First group">
                <button type="button"
                        class="btn btn-outline-primary"
                        data-toggle="tooltip"
                        data-placement="top"
                        data-bs-toggle="modal"
                        disabled = "@(waiting || !CanCreate())"
                        title="Criar um novo componente curricular"
                        @onclick="() => OnCreate()">
                    <i class="bi bi-plus-slash-minus"></i>
                    Criar um novo componente curricular
                </button>
            </div>
            <PageNavigationComponent CurrentPage="@currentPage" NumberOfPages="@numberOfPages" GotoPage="@OnPageChange"></PageNavigationComponent>
        </div>
    </article>
</section>

@code {
    [Inject]
    private IInstituteService instituteService { get; set; } = default!;
    [Inject]
    private IClassService classService { get; set; } = default!;
    [Inject]
    private IClassTypeService classTypeService { get; set; } = default!;
    [Parameter]
    public Guid InstituteId { get; set; } = default!;

    protected List<ClassModel> classList = new();
    protected bool _viewDetails = false;
    protected ClassModel entitySelected = new();
    protected string previousCode = string.Empty;
    protected string previousName = string.Empty;
    protected int previousPractice;
    protected int previousTheory;
    protected int previousPR;
    protected Guid previousTypeId;

    private Guid instituteId;
    private InstituteModel? institute;

    protected bool EditDialogIsOpen = false;

    private readonly int pageSize = 10;
    protected int currentPage = 0;
    protected int previousPage = -1;
    protected int nextPage = -1;
    protected int numberOfPages = 0;

    protected bool waiting = true;
    protected bool created = false;

    protected bool ascendingSort = false;
    protected string? sort = "LastModified";
    protected string? codeFilter = "";
    protected string? nameFilter = "";
    protected string? practiceFilter = "";
    protected string? theoryFilter = "";
    protected string? prFilter = "";
    protected Guid typeFilter = Guid.Empty;
    protected string? createdFilter = "";
    protected string? createdByFilter = "";
    protected string? lastModifiedFilter = "";
    protected string? lastModifiedByFilter = "";

    private Dictionary<Guid, string> classTypeList = new();

    protected string TextToDisplay(string? text, int maxLength = 200)
        => text is not null && text.Length < maxLength ? text : text?.Substring(0, maxLength) + "...";

    protected override void OnInitialized()
    {
        instituteId = InstituteId;
        Guard.Against.Null(instituteId);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            institute = await instituteService.GetInstituteById(instituteId);
            await GetAllClassType();
            await PageRequest(currentPage);
        }
    }

    protected override bool CanCreate()
    {
        if (_isInstituteAdmin && _userInstituteId == InstituteId)
            return true;
        if (_isHoldingAdmin)
            return true;
        return base.CanCreate();
    }

    protected override bool CanEdit(Entity? institute)
    {
        if (institute is null)
            return false;
        if (_isInstituteAdmin && _userInstituteId == institute.Id)
            return true;
        if (_isHoldingAdmin)
            return true;
        return base.CanCreate();
    }

    protected async Task OnPageChange(int page)
    {
        await PageRequest(page);
    }

    private async Task GetAllClassType()
    {
        waiting = true;
        var message = await classTypeService.PostPage(
            new GetClassTypePageRequest(
                instituteId,
                0,
                int.MaxValue,
                sort,
                ascendingSort,
                null,
                null,
                null,
                null,
                null
                )
            );

        if (message.IsSuccessStatusCode)
        {
            var tmp = JsonConvert.DeserializeObject<PageOfClassTypeModel>(await message.Content.ReadAsStringAsync());
            Guard.Against.Null(tmp);
            tmp.Entities.ForEach(o => classTypeList.Add(o.Id, o.Code));
        }
        waiting = false;
    }

    protected async Task PageRequest(int page)
    {
        waiting = true;
        var message = await classService.PostPage(
            new GetClassPageRequest(
                instituteId,
                page,
                pageSize,
                sort,
                ascendingSort,
                codeFilter,
                nameFilter,
                string.IsNullOrWhiteSpace(practiceFilter) ? -1 : int.Parse(practiceFilter),
                string.IsNullOrWhiteSpace(theoryFilter) ? -1 : int.Parse(theoryFilter),
                string.IsNullOrWhiteSpace(prFilter) ? -1 : int.Parse(prFilter),
                typeFilter,
                createdFilter,
                createdByFilter,
                lastModifiedFilter,
                lastModifiedByFilter
                )
            );

        if (message.IsSuccessStatusCode)
        {
            var content = await message.Content.ReadAsStringAsync();
            var tmp = JsonConvert.DeserializeObject<PageOfClassModel>(content);
            Guard.Against.Null(tmp);
            classList = tmp.Entities.Select(o => (ClassModel)o).ToList();
            currentPage = tmp.CurrentPage;
            previousPage = tmp.PreviousPage;
            nextPage = tmp.NextPage;
            numberOfPages = tmp.NumberOfPages;
        }
        waiting = false;

        StateHasChanged();
    }

    protected void Edit(ClassModel entity)
    {
        entitySelected = entity;
        previousCode = entitySelected.Code;
        previousName = entitySelected.Name;
        previousPractice = entitySelected.Practice;
        previousTheory = entitySelected.Theory;
        previousPR = entitySelected.PR;
        previousTypeId = entitySelected.TypeId;
        EditDialogIsOpen = true;
        StateHasChanged();
    }

    protected virtual void OnCreate()
    {
        created = true;

        entitySelected = new ClassModel() { InstituteId = instituteId };
        previousCode = "";
        previousName = "";
        previousTheory = 0;
        previousPractice = 0;
        previousPR = -1;
        previousTypeId = Guid.Empty;
        EditDialogIsOpen = true;
        StateHasChanged();
    }

    protected async Task OnEditDialogClose(ClassModel? modifiednewEntity)
    {
        if (modifiednewEntity is not null)
        {
            waiting = true;

            Guard.Against.Null(entitySelected);
            entitySelected.Code = modifiednewEntity.Code;
            entitySelected.Name = modifiednewEntity.Name;
            entitySelected.Theory = modifiednewEntity.Theory;
            entitySelected.Practice = modifiednewEntity.Practice;
            entitySelected.PR = modifiednewEntity.PR;
            entitySelected.TypeId = modifiednewEntity.TypeId;
            HttpResponseMessage response;

            if (created)
            {
                response = await classService.CreateClass(
                    new CreateClassRequest(
                        entitySelected.Code,
                        entitySelected.Name,
                        entitySelected.Practice,
                        entitySelected.Theory,
                        entitySelected.PR,
                        instituteId,
                        entitySelected.TypeId
                        )
                    );
            }
            else
            {
                response = await classService.UpdateClass(
                    new UpdateClassRequest(
                        entitySelected.Id,
                        // entitySelected.Code,
                        entitySelected.Name,
                        entitySelected.Practice,
                        entitySelected.Theory,
                        entitySelected.PR,
                        entitySelected.TypeId
                        )
                    );
            }

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                _toasterService?.AddToastSuccess("As modificações foram salvas.");
                previousCode = entitySelected.Code;
                previousName = entitySelected.Name;
                previousPractice = entitySelected.Practice;
                previousTheory = entitySelected.Theory;
                previousPR = entitySelected.PR;
                previousTypeId = entitySelected.TypeId;

                await PageRequest(currentPage);
            }
            else
            {
                var result = await response.Content.ReadAsStringAsync();
                var error = JsonConvert.DeserializeObject<ProblemDetails>(result);
                Guard.Against.Null(error);
                Guard.Against.Null(error.Title);
                _toasterService?.AddToastError(error.Title);

                entitySelected.Code = previousCode;
                entitySelected.Name = previousName;
                entitySelected.Practice = previousPractice;
                entitySelected.Theory = previousTheory;
                entitySelected.PR = previousPR;
                entitySelected.TypeId = previousTypeId;
            }

            waiting = false;
        }

        EditDialogIsOpen = false;

        StateHasChanged();
    }

#pragma warning disable CS8602
    protected async Task OnCodeChanged(ChangeEventArgs args)
    {
        codeFilter = args.Value.ToString();
        await PageRequest(0);
    }
    protected async Task OnNameChanged(ChangeEventArgs args)
    {
        nameFilter = args.Value.ToString();
        await PageRequest(0);
    }
    protected async Task OnPracticeChanged(ChangeEventArgs args)
    {
        practiceFilter = args.Value.ToString();
        await PageRequest(0);
    }
    protected async Task OnTheoryChanged(ChangeEventArgs args)
    {
        theoryFilter = args.Value.ToString();
        await PageRequest(0);
    }
    protected async Task OnPRChanged(ChangeEventArgs args)
    {
        prFilter = args.Value.ToString();
        await PageRequest(0);
    }
    protected async Task OnTypeChanged(ChangeEventArgs args)
    {
        Guard.Against.Null(args.Value);
        typeFilter = ConvertStringToGuid(args.Value.ToString());
        await PageRequest(0);
    }
    protected async Task OnLastModifiedChanged(ChangeEventArgs args)
    {
        lastModifiedFilter = args.Value.ToString();
        await PageRequest(0);
    }
    protected async Task OnLastModifiedByChanged(ChangeEventArgs args)
    {
        lastModifiedByFilter = args.Value.ToString();
        await PageRequest(0);
    }
#pragma warning restore CS8602

    private static Guid ConvertStringToGuid(string? str)
    {
        Guid guid;

        if (string.IsNullOrWhiteSpace(str))
            return Guid.Empty;
        if (Guid.TryParse(str, out guid))
            return guid;
        else
            return Guid.Empty;
    }

    protected async void SortBy(string SortColumn)
    {
        ascendingSort = !ascendingSort;
        sort = SortColumn;
        await PageRequest(currentPage);
    }

    protected void Details(ClassModel? entity)
    {
        // navigationManager.NavigateTo($"/institute/details/{entity.Id}");
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
    }
}
