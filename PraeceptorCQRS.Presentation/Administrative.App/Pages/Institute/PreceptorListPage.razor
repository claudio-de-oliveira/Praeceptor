@using Administrative.App.Components
@using Administrative.App.Components.Toaster
@using Administrative.App.Dialogs
@using Administrative.App.Interfaces
@using Administrative.App.Models
@using Ardalis.GuardClauses
@using Microsoft.AspNetCore.Mvc;
@using Newtonsoft.Json
@using PraeceptorCQRS.Contracts.Entities.Course
@using PraeceptorCQRS.Contracts.Entities.Preceptor
@using PraeceptorCQRS.Contracts.Entities.PreceptorDegreeType
@using PraeceptorCQRS.Contracts.Entities.PreceptorRegimeType

@implements IDisposable

@inherits AuthenticatedPage

<!-- Modal: Editar entidade -->
@if (EditDialogIsOpen)
{
    <EditPreceptorDialog Code="@previousCode" Name="@previousName" Email="@previousEmail" Image="@previousImage"
                     DegreeTypeId="@previousDegree" RegimeTypeId="@previousRegime" InstituteId="@instituteId" OnClose="@OnEditDialogClose"
                     DegreeOptions="@degreeList" RegimeOptions="@regimeList" />
}

<section class="p-1">
    <article class="content px-4">
        <table class="table table-sm" cellpadding="1" cellspacing="1">
            <thead>
                <tr>
                    <td align="center">
                        <ClearableInputTextComponent Placeholder="Filtrar por Código" Filter="@codeFilter" Waiting="@waiting" OnTextChange="@OnCodeChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center">
                        <ClearableInputTextComponent Placeholder="Filtrar por Nome" Filter="@nameFilter" Waiting="@waiting" OnTextChange="@OnNameChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center">
                        <ClearableInputTextComponent Placeholder="Filtrar por Email" Filter="@emailFilter" Waiting="@waiting" OnTextChange="@OnEmailChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center">
                        <SelectTextComponent Waiting="@waiting" Options="@degreeList" OnSelectedChange="OnDegreeChanged" OnTextChange="OnDegreeChanged"></SelectTextComponent>
                    </td>
                    <td align="center">
                        <SelectTextComponent Waiting="@waiting" Options="@regimeList" OnSelectedChange="OnRegimeChanged" OnTextChange="OnRegimeChanged"></SelectTextComponent>
                    </td>
                    <td align="center"></td>
                    <td align="center"></td>
                </tr>
                <!---->
                <tr>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Código" SortBy="Code" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Nome" SortBy="Name" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Email" SortBy="Email" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Titulação" SortBy="Degree" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Regime" SortBy="Regime" OnClick="@SortBy" />
                    </td>
                    <th></th>
                    <th></th>
                </tr>
                <!---->
            </thead>
            <tbody>
                @foreach (var entity in preceptorList)
                {
                    <tr>
                        <td align="center"><div style="font-size: smaller">@entity.Code</div></td>
                        <td><div style="font-size: smaller">@entity.Name</div></td>
                        <td><div style="font-size: smaller">@entity.Email</div></td>
                        <td align="center"><div style="font-size: smaller">@entity.DegreeType.Code</div></td>
                        <td align="center"><div style="font-size: smaller">@entity.RegimeType.Code</div></td>
                        <td align="right" style="width: 80px;">
                            <button type="button"
                                    class="btn btn-sm btn-success"
                                    data-toggle="tooltip"
                                    data-placement="top"
                                    title="Ver detalhes"
                                    disabled="@(!CanViewDetails(entity))"
                                    @onclick="@(() => Details(entity))"
                                    style="border: none;">
                                Detalhes
                            </button>
                        </td>
                        <td align="right" style="width: 80px;">
                            <button type="button"
                                    class="btn btn-sm btn-warning"
                                    data-toggle="tooltip"
                                    data-placement="top"
                                    data-bs-toggle="modal"
                                    data-bs-target="#editChapterModal"
                                    title="Editar"
                                    disabled="@(!CanEdit(entity))"
                                    @onclick="@(() => Edit(entity))"
                                    style="border: none;">
                                Editar
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <br />
        <div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
            <div class="btn-group" role="group" aria-label="First group">
                <button type="button"
                        class="btn btn-outline-primary"
                        data-toggle="tooltip"
                        data-placement="top"
                        data-bs-toggle="modal"
                        disabled = "@(waiting || !CanCreate())"
                        title="Adicionar um novo docente"
                        @onclick="() => OnCreate()">
                    <i class="bi bi-plus-slash-minus"></i>
                    Adicionar um novo docente
                </button>
            </div>
            <PageNavigationComponent CurrentPage="@currentPage" NumberOfPages="@numberOfPages" GotoPage="@OnPageChange"></PageNavigationComponent>
        </div>
    </article>
</section>

@code {
    [Inject]
    private IInstituteService instituteService { get; set; } = default!;
    [Inject]
    private IPreceptorService preceptorService { get; set; } = default!;
    [Inject]
    private IPreceptorDegreeService preceptorDegreeService { get; set; } = default!;
    [Inject]
    private IPreceptorRegimeService preceptorRegimeService { get; set; } = default!;

    [Parameter]
    public Guid InstituteId { get; set; } = default!;

    protected List<PreceptorModel> preceptorList = new();
    protected bool _viewDetails = false;
    protected PreceptorModel entitySelected = new();
    protected string previousCode = default!;
    protected string previousName = default!;
    protected string previousEmail = default!;
    protected string? previousImage;
    protected Guid previousDegree;
    protected Guid previousRegime;

    private Guid instituteId;
    private InstituteModel? institute;

    protected bool EditDialogIsOpen = false;

    private readonly int pageSize = 10;
    protected int currentPage = 0;
    protected int previousPage = -1;
    protected int nextPage = -1;
    protected int numberOfPages = 0;

    protected bool waiting = true;
    protected bool created = false;

    protected bool ascendingSort = false;
    protected string? sort = "LastModified";
    protected string? codeFilter = "";
    protected string? nameFilter = "";
    protected string? emailFilter = "";
    protected Guid degreeFilter = Guid.Empty;
    protected Guid regimeFilter = Guid.Empty;
    protected string? createdFilter = "";
    protected string? createdByFilter = "";
    protected string? lastModifiedFilter = "";
    protected string? lastModifiedByFilter = "";

    private Dictionary<Guid, string> degreeList = new();
    private Dictionary<Guid, string> regimeList = new();

    protected string TextToDisplay(string? text, int maxLength = 200)
        => text is not null && text.Length < maxLength ? text : text?.Substring(0, maxLength) + "...";

    protected override void OnInitialized()
    {
        instituteId = InstituteId;
        Guard.Against.Null(instituteId);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            institute = await instituteService.GetInstituteById(instituteId);
            await GetAllPreceptorDegreeType();
            await GetAllPreceptorRegimeType();
            await PageRequest(currentPage);
        }
    }

    protected override bool CanCreate()
    {
        if (_isInstituteAdmin && _userInstituteId == InstituteId)
            return true;
        if (_isHoldingAdmin)
            return true;
        return base.CanCreate();
    }

    protected override bool CanEdit(Entity? institute)
    {
        if (institute is null)
            return false;
        if (_isInstituteAdmin && _userInstituteId == institute.Id)
            return true;
        if (_isHoldingAdmin)
            return true;
        return base.CanCreate();
    }

    protected async Task OnPageChange(int page)
    {
        await PageRequest(page);
    }

    private async Task GetAllPreceptorDegreeType()
    {
        waiting = true;
        var message = await preceptorDegreeService.PostPage(
            new GetPreceptorDegreeTypePageRequest(
                instituteId,
                0,
                int.MaxValue,
                sort,
                ascendingSort,
                "",
                "",
                "",
                "",
                ""
                )
            );

        if (message.IsSuccessStatusCode)
        {
            var tmp = JsonConvert.DeserializeObject<PageOfPreceptorDegreeTypeModel>(await message.Content.ReadAsStringAsync());
            Guard.Against.Null(tmp);
            tmp.Entities.ForEach(o => degreeList.Add(o.Id, o.Code));
        }
        else
        {
            await OnHttpErrorMessage(message);
        }
        waiting = false;
    }

    private async Task GetAllPreceptorRegimeType()
    {
        waiting = true;
        var message = await preceptorRegimeService.PostPage(
            new GetPreceptorRegimeTypePageRequest(
                instituteId,
                0,
                int.MaxValue,
                sort,
                ascendingSort,
                "",
                "",
                "",
                "",
                ""
                )
            );

        if (message.IsSuccessStatusCode)
        {
            var tmp = JsonConvert.DeserializeObject<PageOfPreceptorRegimeTypeModel>(await message.Content.ReadAsStringAsync());
            Guard.Against.Null(tmp);
            tmp.Entities.ForEach(o => regimeList.Add(o.Id, o.Code));
        }
        else
        {
            await OnHttpErrorMessage(message);
        }
        waiting = false;
    }

    protected async Task PageRequest(int page)
    {
        waiting = true;
        var message = await preceptorService.PostPage(
            new GetPreceptorPageRequest(
                instituteId,
                page,
                pageSize,
                sort,
                ascendingSort,
                codeFilter,
                nameFilter,
                emailFilter,
                degreeFilter,
                regimeFilter,
                createdFilter,
                createdByFilter,
                lastModifiedFilter,
                lastModifiedByFilter
                )
            );

        if (message.IsSuccessStatusCode)
        {
            var content = await message.Content.ReadAsStringAsync();
            var tmp = JsonConvert.DeserializeObject<PageOfPreceptorModel>(content);
            Guard.Against.Null(tmp);
            preceptorList = tmp.Entities.Select(o => (PreceptorModel)o).ToList();
            currentPage = tmp.CurrentPage;
            previousPage = tmp.PreviousPage;
            nextPage = tmp.NextPage;
            numberOfPages = tmp.NumberOfPages;
        }
        else
        {
            await OnHttpErrorMessage(message);
        }
        waiting = false;

        StateHasChanged();
    }

    protected void Edit(PreceptorModel entity)
    {
        entitySelected = entity;
        previousCode = entitySelected.Code;
        previousName = entitySelected.Name;
        previousEmail = entitySelected.Email;
        previousImage = entitySelected.Image;
        previousDegree = entitySelected.DegreeTypeId;
        previousRegime = entitySelected.RegimeTypeId;
        EditDialogIsOpen = true;
        StateHasChanged();
    }

    protected virtual void OnCreate()
    {
        created = true;

        entitySelected = new PreceptorModel() { InstituteId = instituteId };
        previousCode = "";
        previousName = "";
        previousEmail = "";
        previousImage = "";
        previousDegree = Guid.Empty;
        previousRegime = Guid.Empty;
        EditDialogIsOpen = true;
        StateHasChanged();
    }

    protected async Task OnEditDialogClose(PreceptorModel? modifiednewEntity)
    {
        if (modifiednewEntity is not null)
        {
            waiting = true;

            Guard.Against.Null(entitySelected);
            entitySelected.Code = modifiednewEntity.Code;
            entitySelected.Name = modifiednewEntity.Name;
            entitySelected.Email = modifiednewEntity.Email;
            entitySelected.Image = modifiednewEntity.Image;
            entitySelected.DegreeTypeId = modifiednewEntity.DegreeTypeId;
            entitySelected.RegimeTypeId = modifiednewEntity.RegimeTypeId;
            HttpResponseMessage response;

            if (created)
            {
                response = await preceptorService.CreatePreceptor(
                    new CreatePreceptorRequest(
                        entitySelected.Code,
                        entitySelected.Name,
                        entitySelected.Email,
                        entitySelected.Image,
                        entitySelected.DegreeTypeId,
                        entitySelected.RegimeTypeId,
                        instituteId
                        )
                    );
            }
            else
            {
                response = await preceptorService.UpdatePreceptor(
                    new UpdatePreceptorRequest(
                        entitySelected.Id,
                        // entitySelected.Code,
                        entitySelected.Name,
                        entitySelected.Email,
                        entitySelected.Image,
                        entitySelected.DegreeTypeId,
                        entitySelected.RegimeTypeId
                        )
                    );
            }

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                _toasterService?.AddToastSuccess("As modificações foram salvas.");
                previousCode = entitySelected.Code;
                previousName = entitySelected.Name;
                previousEmail = entitySelected.Email;
                previousImage = entitySelected.Image;
                previousDegree = entitySelected.DegreeTypeId;
                previousRegime = entitySelected.RegimeTypeId;

                await PageRequest(currentPage);
            }
            else
            {
                await OnHttpErrorMessage(response);

                entitySelected.Code = previousCode;
                entitySelected.Name = previousName;
                entitySelected.Email = previousEmail;
                entitySelected.Image = previousImage;
                entitySelected.DegreeTypeId = previousDegree;
                entitySelected.RegimeTypeId = previousRegime;
            }

            waiting = false;
        }

        EditDialogIsOpen = false;

        StateHasChanged();
    }

#pragma warning disable CS8602
    protected async Task OnCodeChanged(string? text)
    {
        codeFilter = text;
        await PageRequest(0);
    }
    protected async Task OnNameChanged(string? text)
    {
        nameFilter = text;
        await PageRequest(0);
    }
    protected async Task OnEmailChanged(string? text)
    {
        emailFilter = text;
        await PageRequest(0);
    }
    protected async Task OnDegreeChanged(ChangeEventArgs args)
    {
        Guard.Against.Null(args.Value);
        degreeFilter = ConvertStringToGuid(args.Value.ToString());
        await PageRequest(0);
    }
    protected async Task OnRegimeChanged(ChangeEventArgs args)
    {
        Guard.Against.Null(args.Value);
        regimeFilter = ConvertStringToGuid(args.Value.ToString());
        await PageRequest(0);
    }
    protected async Task OnCreatedByChanged(ChangeEventArgs args)
    {
        createdByFilter = args.Value.ToString();
        await PageRequest(0);
    }
    protected async Task OnLastModifiedChanged(ChangeEventArgs args)
    {
        lastModifiedFilter = args.Value.ToString();
        await PageRequest(0);
    }
    protected async Task OnLastModifiedByChanged(ChangeEventArgs args)
    {
        lastModifiedByFilter = args.Value.ToString();
        await PageRequest(0);
    }
#pragma warning restore CS8602

    private Guid ConvertStringToGuid(string? str)
    {
        Guid guid;

        if (string.IsNullOrWhiteSpace(str))
            return Guid.Empty;
        if (Guid.TryParse(str, out guid))
            return guid;
        else
            return Guid.Empty;
    }

    protected async void SortBy(string SortColumn)
    {
        ascendingSort = !ascendingSort;
        sort = SortColumn;
        await PageRequest(currentPage);
    }

    protected void Details(PreceptorModel? entity)
    {
        // navigationManager.NavigateTo($"/institute/details/{entity.Id}");
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
    }
}
