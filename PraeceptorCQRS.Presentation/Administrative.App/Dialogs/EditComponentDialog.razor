@using Administrative.App.Components.Toaster
@using Ardalis.GuardClauses
@using Microsoft.AspNetCore.Mvc;
@using Newtonsoft.Json

@using Administrative.App.Components
@using Administrative.App.Interfaces
@using Administrative.App.Models

@using PraeceptorCQRS.Contracts.Entities.AxisType
@using PraeceptorCQRS.Contracts.Entities.Class
@using System.Runtime.CompilerServices;

    <div class="modal t-modal primary fade show"
     data-backdrop="static"
     aria-labelledby="staticBackdropLabel"
     aria-hidden="true"
     aria-modal="true"
     role="dialog">
        <div class="modal-dialog modal-dialog-scrollable modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Edite os campos desejáveis</h5>
                </div>
                <div class="modal-body">
                    <div class="container">
                        <div class="form-group purple-border">
                            <form class="row g-3">
                                <!-- Não editável -->
                                <div class="col-12">
                                    <label for="recipient-class" class="col-form-label">Componente curricular</label>
                                    <input id="recipient-class"
                                       type="text"
                                       class="form-control"
                                       value="@ComponentName(Component)"
                                       disabled="@true"
                                       contenteditable="@false"
                                       style="background-color:aliceblue;">
                                </div>
                                <!-- Editáveis -->
                                <label for="recipient-axis" class="col-form-label">Eixo</label>
                                <div class="col-9">
                                    <div class="input-group mb-3">
                                        <select id="recipient-axis"
                                            value="@Component?.Axis.Code"
                                            class="form-select"
                                            aria-label="Default select example"
                                            @onchange="OnAxisTypeChanged">

                                            @foreach (var axis in axisTypeList)
                                            {
                                                <option value="@axis.Code">@axis.Code</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="col-1">
                                </div>
                                <div class="col-2">
                                    <div class="form-check">
                                        <input class="form-check-input"
                                           value="@Component?.Optative"
                                           type="checkbox" 
                                           id="optativeCheckChecked"
                                           @onchange="OnChangeOptative"
                                           checked=@Component?.Optative>
                                        <label class="form-check-label" for="optativeCheckChecked">
                                            Optativa
                                        </label>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button"
                        class="btn btn-outline-danger"
                        data-bs-dismiss="modal"
                        data-toggle="tooltip"
                        data-placement="top"
                        data-bs-toggle="modal"
                        data-bs-target="#editChapterModal"
                        title="Cuidado: As modificações serão perdidas"
                        @onclick="@(() => Cancel())">
                        Ignorar
                    </button>
                    <button type="button" class="btn btn-outline-primary"
                        @onclick="@(async () => await Ok())">
                        Salvar alterações
                    </button>
                </div>
            </div>
        </div>
    </div>

@code {
    [Inject]
    public IAxisTypeService axisService { get; set; } = default!;
    [Inject]
    public IClassService classService { get; set; } = default!;
    [Inject]
    protected ToasterService? _toasterService { get; set; }

    [Parameter]
    public Guid InstituteId { get; set; } = default!;
    [Parameter]
    public ComponentModel? Component { get; set; }
    [Parameter]
    public EventCallback<ComponentModel?> OnClose { get; set; }

    private List<AxisTypeModel> axisTypeList = new();

    private string ComponentName(ComponentModel? component) => component is not null ? component.Class.Name : "";

    protected override async Task OnInitializedAsync()
    {
        var message = await axisService.GetAxisTypePage(
            new GetAxisTypePageRequest(
                InstituteId,
                0,
                int.MaxValue,
                null,
                true,
                null,
                null,
                null,
                null,
                null
            )
        );
        if (message.IsSuccessStatusCode)
        {
            var content = await message.Content.ReadAsStringAsync();
            var response = JsonConvert.DeserializeObject<PageOfAxisTypeModel>(content);
            Guard.Against.Null(response);
            axisTypeList = response.Entities.Select(o => (AxisTypeModel)o).ToList();
        }
        else
        {
            await OnHttpErrorMessage(message);
        }
    }

    private void OnAxisTypeChanged(ChangeEventArgs args)
    {
        Guard.Against.Null(args.Value);
        var code = (string)args.Value;
        Guard.Against.Null(Component);
        var axis = axisTypeList.Find(o => o.Code == code);
        Guard.Against.Null(axis);
        Component.Axis = axis;
        Component.AxisTypeId = axis.Id;
    }

    private void OnChangeOptative()
    {
        Guard.Against.Null(Component);
        Component.Optative = !Component.Optative;
    }

    private Task Cancel()
    {
        return OnClose.InvokeAsync(null);
    }

    private Task Ok()
    {
        return OnClose.InvokeAsync(Component);
    }

    protected async Task OnHttpErrorMessage(
        HttpResponseMessage message,
        [CallerLineNumber] int lineNumber = 0,
        [CallerMemberName] string? caller = null
        )
    {
        var result = await message.Content.ReadAsStringAsync();
        var error = JsonConvert.DeserializeObject<ProblemDetails>(result);
        if (error is null || error.Title is null)
        {
            _toasterService?.AddToastError($"Erro não identifiacdo em {caller}, linha {lineNumber}");
        }
        else
        {
            _toasterService?.AddToastError(error.Title);
        }
    }
}
