@using Administrative.App.Models
@using Ardalis.GuardClauses

<div class="modal t-modal primary fade show"
     data-backdrop="static"
     aria-labelledby="staticBackdropLabel"
     aria-hidden="true"
     aria-modal="true"
     role="dialog">
    <div class="modal-dialog modal-dialog-scrollable modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Edite os campos desejáveis</h5>
            </div>
            <div class="modal-body">
                <div class="container">
                    <div class="form-group purple-border">
                        <form>
                            <div class="mb-3">
                                <label for="preceptor-code" class="col-form-label">Code</label>
                                <input type="text" class="form-control input-editable" @bind-value="@_code" id="preceptor-code" contenteditable="false" />
                            </div>
                            <div class="mb-3">
                                <label for="preceptor-name" class="col-form-label">Nome</label>
                                <input type="text" class="form-control input-editable" @bind-value="@name" id="preceptor-name" contenteditable="false" />
                            </div>
                            <div class="mb-3">
                                <label for="preceptor-email" class="col-form-label">Email</label>
                                <input type="text" class="form-control input-editable" @bind-value="@email" id="preceptor-email" contenteditable="true" />
                            </div>
                            <div class="mb-3">
                                <label for="preceptor-image" class="col-form-label">Imagem</label>
                                <input type="text" class="form-control input-editable" @bind-value="@image" id="preceptor-image" contenteditable="true" />
                            </div>
                            <div class="mb-3">
                                <label for="preceptor-degree" class="col-form-label">Titulação</label>
                                <select class="form-select" id="preceptor-degree" @bind="@degreeTypeId" style="background-color:aliceblue;">
                                    @foreach (var option in DegreeOptions)
                                    {
                                        <option value=@option.Key>@option.Value</option>
                                    }
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="preceptor-regime" class="col-form-label">Regime de trabalho</label>
                                <select class="form-select" id="preceptor-regime" @bind="@regimeTypeId" style="background-color:aliceblue;">
                                    @foreach (var option in RegimeOptions)
                                    {
                                        <option value=@option.Key>@option.Value</option>
                                    }
                                </select>
                            </div>

                        </form>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button"
                        class="btn btn-outline-danger"
                        data-bs-dismiss="modal"
                        data-toggle="tooltip"
                        data-placement="top"
                        data-bs-toggle="modal"
                        data-bs-target="#editChapterModal"
                        title="Cuidado: As modificações serão perdidas"
                        @onclick="@(() => Cancel())">
                    Ignorar
                </button>
                <button type="button" class="btn btn-outline-primary" @onclick="@(async () => await Ok())">Salvar alterações</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Code { get; set; } = null!;
    [Parameter]
    public string Name { get; set; } = null!;
    [Parameter]
    public string Email { get; set; } = null!;
    [Parameter]
    public string? Image { get; set; }
    [Parameter]
    public Guid DegreeTypeId { get; set; }
    [Parameter]
    public Guid RegimeTypeId { get; set; }
    [Parameter]
    public Guid InstituteId { get; set; }
    [Parameter]
    public EventCallback<PreceptorModel?> OnClose { get; set; }
    [Parameter]
    public Dictionary<Guid, string> DegreeOptions { get; set; } = default!;
    [Parameter]
    public Dictionary<Guid, string> RegimeOptions { get; set; } = default!;

    private string _code = default!;
    private string name = default!;
    private string email = default!;
    private string? image;
    private Guid degreeTypeId = default!;
    private Guid regimeTypeId = default!;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _code = Code;
            name = Name;
            email = Email;
            image = Image;
            degreeTypeId = DegreeTypeId;
            regimeTypeId = RegimeTypeId;

            StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }

    private Task Cancel()
    {
        return OnClose.InvokeAsync(null);
    }

    private Task Ok()
    {
        if (string.Compare(_code, Code) != 0 || string.Compare(name, Name) != 0 || string.Compare(email, Email) != 0 ||
            string.Compare(image, Image) != 0 || degreeTypeId != DegreeTypeId || regimeTypeId != RegimeTypeId
        )
            return OnClose.InvokeAsync(new PreceptorModel
                {
                    Code = _code,
                    Name = name,
                    Email = email,
                    Image = image,
                    DegreeTypeId = degreeTypeId,
                    RegimeTypeId = regimeTypeId
                });
        else
            return OnClose.InvokeAsync(null);
    }
}
