@using Ardalis.GuardClauses

<div class="input-group">
    <button type="button"
            class="btn btn-sm btn-outline-secondary"
            onclick="@(() => PageChanged(0))"
            disabled="@(currentPage == 0)">
        <i class="bi bi-chevron-double-left"></i>
    </button>
    <button type="button"
            class="btn btn-sm btn-outline-secondary"
            onclick="@(() => PageChanged(currentPage - 1))"
            disabled="@(currentPage == 0)">
        <i class="bi bi-chevron-left"></i>
    </button>

    <button type="button"
            class="btn px-3 btn-sm btn-outline-secondary"
            disabled="@true">
        @($"Página {currentPage + 1} de {numberOfPages}")
    </button>

    <button type="button"
            class="btn btn-sm btn-outline-secondary"
            onclick="@(() => PageChanged(currentPage + 1))"
            disabled="@(currentPage + 1 == numberOfPages)">
        <i class="bi bi-chevron-right"></i>
    </button>
    <button type="button"
            class="btn btn-sm btn-outline-secondary"
            onclick="@(() => PageChanged(numberOfPages - 1))"
            disabled="@(currentPage + 1 == numberOfPages)">
        <i class="bi bi-chevron-double-right"></i>
    </button>
</div>

@code {
    [Parameter]
    public int CurrentPage { get; set; }
    [Parameter]
    public int NumberOfPages { get; set; }
    [Parameter]
    public EventCallback<int> GotoPage { get; set; }

    private int currentPage = 0;
    private int numberOfPages;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            currentPage = CurrentPage;
            numberOfPages = NumberOfPages;
            StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }

    private async Task PageChanged(int page)
    {
        if (page != currentPage)
            await GotoPage.InvokeAsync(page);
        currentPage = page;
        StateHasChanged();
    }
}
