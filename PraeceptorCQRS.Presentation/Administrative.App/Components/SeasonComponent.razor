@*
@using Administrative.App.Dialogs
@using Administrative.App.Interfaces
@using Administrative.App.Models
@using Ardalis.GuardClauses

<!-- Modal: Editar entidade -->
@if (EditDialogIsOpen)
{
    <EditComponentDialog InstituteId="@InstituteId"
                     Components="@Season.Components"
                     CourseId="@CourseId"
                     Curriculum="@(Curriculum ?? 0)"
                     Season="@SeasonNumber"
                     OnClose="@OnEditClose" />
}

@if (Season is not null)
{
    <div>
        <table class='table'>
            <tbody>
                @foreach (var entity in Season.Components)
                {
                    <tr>
                        <td>@entity.Class.Code</td>
                        <td>@entity.Class.Name</td>
                        <td>@entity.Class.Theory</td>
                        <td>@entity.Class.Practice</td>
                        <td>@entity.Optative</td>
                        <td>@entity.Axis.Code</td>
                        <td align="center">
                            <button type="button"
                                class="btn btn-outline-primary"
                                data-toggle="tooltip"
                                data-placement="top"
                                data-bs-toggle="modal"
                                data-bs-target="#editComponentModal"
                                title="Editar"
                                @onclick="@(() => EditComponent(entity))"
                                style="border: none;">
                                <i class="bi bi-pencil"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="btn-group" role="group" aria-label="First group">
            <button type="button"
                class="btn btn-outline-primary"
                data-toggle="tooltip"
                data-placement="top"
                data-bs-toggle="modal"
                disabled="@waiting"
                title="Incluir componente curricular"
                @onclick="(() => EditSeason())">
                <i class="bi bi-plus-slash-minus"></i>
                Incluir componente curricular
            </button>
        </div>

        <br />
    </div>
}


@code {
    [Inject]
    public IComponentService componentService { get; set; } = default!;
    [Inject]
    public IClassService classService { get; set; } = default!;
    [Inject]
    public IAxisTypeService axisTypeService { get; set; } = default!;

    [Parameter]
    public Guid InstituteId { get; set; } = default!;
    [Parameter]
    public Guid CourseId { get; set; } = default!;
    [Parameter]
    public int? Curriculum { get; set; }
    [Parameter]
    public int SeasonNumber { get; set; }

    protected bool waiting = true;

    private SeasonModel Season = default!;

    private bool EditDialogIsOpen = false;

    protected override void OnInitialized()
    {
        if (InstituteId == Guid.Empty)
            throw new InvalidDataException("InstituteId inválido");
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        waiting = true;
        var components = await componentService.GetComponentListByCourseAndCurriculumAndSeason(CourseId, Curriculum ?? 0, SeasonNumber);
        Guard.Against.Null(components);

        Season = new SeasonModel { Order = SeasonNumber, Components = components.ToList() };
        foreach (var component in Season.Components)
        {
            var cls = await classService.GetClassById(component.ClassId);
            Guard.Against.Null(cls);
            component.Class = cls;
            var axis = await axisTypeService.GetAxisTypeById(component.AxisTypeId);
            Guard.Against.Null(axis);
            component.Axis = axis;
        }

        await base.OnInitializedAsync();
        waiting = false;
    }

    protected void EditComponent(ComponentModel entity)
    {
    }

    protected void EditSeason()
    { 
        EditDialogIsOpen = true;
        StateHasChanged();
    }

    private void OnEditClose(ComponentModel? component)
    {
        EditDialogIsOpen = false;
        StateHasChanged();
    }

    protected void OnCreate()
    {
    }
}
*@