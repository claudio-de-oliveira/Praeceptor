<div class="input-group input-group-sm mb-3">

    <input type="text" 
           class="form-control form-control-sm"
           value="@Filter"
           disabled="@Waiting" 
           placeholder="@Placeholder"
           @onchange=@OnChange
           @onkeydown="KeyWasPressed" @onkeypress:preventDefault="preventDefault"
           style="font-size:small; background-color:aliceblue;">

    @if (Waiting)
    {
        <button type="button" class="btn btn-sm btn-outline-primary" disabled>
            <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
        </button>
    }
    else
    {
        <button class="btn btn-sm btn-outline-primary btn-clear" type="button" data-toggle="tooltip" title="Limpar"
                disabled="@(string.IsNullOrWhiteSpace(Filter))"
                @onclick="@OnClear">
            <i class="bi small bi-x-lg"></i>
        </button>
    }

</div>

@code {
    [Parameter]
    public bool Waiting { get; set; }
    [Parameter]
    public string? Filter { get; set; }
    [Parameter]
    public string Placeholder { get; set; } = default!;
    [Parameter]
    public EventCallback<string> OnTextChange { get; set; }

    bool preventDefault = false;

    private async void OnChange(ChangeEventArgs args)
    {
        await OnTextChange.InvokeAsync((string?)args.Value);
    }

    private async Task OnClear()
    {
        Filter = "";
        await OnTextChange.InvokeAsync("");
        StateHasChanged();
    }

    private void KeyWasPressed(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
            preventDefault = true;
        else
            preventDefault = false;
    }
}