@using Document.App.Components.Toaster
@using Microsoft.AspNetCore.Components.Authorization
@using System.Runtime.CompilerServices;
@using Microsoft.AspNetCore.Mvc;
@using Newtonsoft.Json;

@code {
    [CascadingParameter]
    protected Task<AuthenticationState> authenticationStateTask { get; set; } = default!;
    [Inject]
    protected ToasterService? _toasterService { get; set; }

    protected bool _isSystemAdmin = false;
    protected bool _isHoldingAdmin = false;
    protected Guid _userHoldingId = Guid.Empty;
    protected bool _isInstituteAdmin = false;
    protected Guid _userInstituteId = Guid.Empty;
    protected bool _isCourseAdmin = false;
    protected Guid _userCourseId = Guid.Empty;
    protected bool _isVisitor = false;
    protected string _userName = default!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var principal = authState.User;

        _isSystemAdmin = principal.IsInRole("SystemAdmin");
        _isHoldingAdmin = principal.IsInRole("HoldingAdmin");
        var holdingClaim = principal.Claims.FirstOrDefault(x => x.Type == "holdingid");
        if (holdingClaim is not null)
            _userHoldingId = Guid.Parse(holdingClaim.Value);
        _isInstituteAdmin = principal.IsInRole("InstituteAdmin");
        var instituteClaim = principal.Claims.FirstOrDefault(x => x.Type == "instituteid");
        if (instituteClaim is not null)
            _userInstituteId = Guid.Parse(instituteClaim.Value);
        _isCourseAdmin = principal.IsInRole("CourseAdmin");
        var courseClaim = principal.Claims.FirstOrDefault(x => x.Type == "courseid");
        if (courseClaim is not null)
            _userCourseId = Guid.Parse(courseClaim.Value);
        _isVisitor = principal.IsInRole("Visitor");

        var nameClaim = principal.Claims.FirstOrDefault(x => x.Type == "name");
        if (nameClaim is not null)
            _userName = nameClaim.Value;
    }

    protected async Task OnHttpErrorMessage(
        HttpResponseMessage message,
        [CallerLineNumber] int lineNumber = 0,
        [CallerMemberName] string? caller = null
        )
    {
        var result = await message.Content.ReadAsStringAsync();
        var error = JsonConvert.DeserializeObject<ProblemDetails>(result);
        if (error is null || error.Title is null)
        {
            _toasterService?.AddToastError($"Erro não identifiacdo em {caller}, linha {lineNumber}");
        }
        else
        {
            _toasterService?.AddToastError(error.Title);
        }
    }
}
