@using Ardalis.GuardClauses
@using Document.App.Components.Toaster
@using Document.App.Notifiers
@using Document.App.Requests
@using Microsoft.AspNetCore.Mvc
@using Newtonsoft.Json
@using PraeceptorCQRS.Contracts.Entities.Node
@using Serilog

@typeparam TServer1 where TServer1 : IEntityService
@typeparam TServer2 where TServer2 : IEntityService

@inherits AuthenticatedPage

@code {
    [Inject]
    private TServer1 FirstEntityService { get; set; } = default(TServer1)!;
    [Inject]
    private TServer2 SecondEntityService { get; set; } = default(TServer2)!;

    [Parameter]
    public Guid EntityId { get; set; }
    [Parameter]
    public Guid DocumentId { get; set; }

    protected List<BookEntity> allEntities = new List<BookEntity>();
    protected List<BookEntity> previousSelectedEntities = new List<BookEntity>();
    protected List<BookEntity> newSelectedEntities = new List<BookEntity>();
    protected bool _viewDetails = false;
    protected BookEntity entitySelected = new();

    protected string previousTitle = string.Empty;
    protected string previousText = string.Empty;

    protected bool SelectEntitiesDialogIsOpen = false;
    protected bool EditEntityDialogIsOpen = false;

    protected BookEntity _entity = null!;

    protected bool waiting = true;

    protected string TextToDisplay(string? text, int maxLength = 200)
        => text is not null && text.Length < maxLength ? text : text?.Substring(0, maxLength) + "...";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            waiting = true;
            var entity = await FirstEntityService.GetEntity(EntityId);
            Guard.Against.Null(entity);
            _entity = entity;

            var list = await SecondEntityService.GetEntityList(_entity.Id);
            Guard.Against.Null(list);
            previousSelectedEntities = list;
            waiting = false;
        }

        StateHasChanged();
    }

    protected virtual void Details(BookEntity entity)
    {
        // Nothing todo here
    }

    protected async Task OpenSelectEntitiesDialog()
    {
        waiting = true;
        var tmp = (await SecondEntityService.GetAllEntities(_userInstituteId))?.ToList();
        if (tmp is not null)
            allEntities = tmp.Select(o => (BookEntity)o).ToList();
        waiting = false;

        SelectEntitiesDialogIsOpen = true;
        StateHasChanged();
    }

    protected async Task OnSelectEntitiesDialogClose(List<BookEntity>? newSelection)
    {
        if (newSelection is not null)
        {
            waiting = true;
            foreach (var item in allEntities)
            {
                var model1 = newSelection.Find(o => o.Id == item.Id);
                var model2 = previousSelectedEntities?.Find(o => o.Id == item.Id);

                if (model2 is null && model1 is not null)
                {
                    var chapter = await InsertEntity(_entity.Id, DocumentId, item.Id);
                    previousSelectedEntities?.Add(chapter);
                }
                else if (model2 is not null && model1 is null)
                {
                    await RemoveEntity(_entity.Id, item.Id);

                    previousSelectedEntities?.Remove(model2);
                }
            }
            waiting = false;
        }

        SelectEntitiesDialogIsOpen = false;

        StateHasChanged();
    }

    protected void Edit(BookEntity entity)
    {
        entitySelected = entity;
        previousTitle = entitySelected.Title;
        previousText = entitySelected.Text;
        EditEntityDialogIsOpen = true;
        StateHasChanged();
    }

    protected async Task OnEditEntityDialogClose(BookEntity? modifiednewEntity)
    {
        if (modifiednewEntity is not null)
        {
            waiting = true;

            Guard.Against.Null(entitySelected);
            entitySelected.Title = modifiednewEntity.Title;
            entitySelected.Text = modifiednewEntity.Text;
            var response = await SecondEntityService.UpdateEntity(
                new UpdateEntityRequest(
                    entitySelected.Id,
                    entitySelected.Title,
                    entitySelected.Text,
                    _userName
                )
            );

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                _toasterService?.AddToastSuccess("As modificações foram salvas.");
                previousTitle = entitySelected.Title;
                previousText = entitySelected.Text;
            }
            else
            {
                var result = await response.Content.ReadAsStringAsync();
                var error = JsonConvert.DeserializeObject<ProblemDetails>(result);
                Guard.Against.Null(error);
                Guard.Against.Null(error.Title);
                _toasterService?.AddToastError(error.Title);

                entitySelected.Title = previousTitle;
                entitySelected.Text = previousText;
            }
            waiting = false;
        }

        EditEntityDialogIsOpen = false;

        StateHasChanged();
    }

    protected bool HasBeenModified(BookEntity entity)
    {
        if (entity is not null)
            return entity.Title != previousTitle || entity.Text != previousText;
        return false;
    }

    protected async Task MoveBackward(BookEntity entity)
    {
        waiting = true;

        var response = await FirstEntityService.MoveEntityBackward(_entity.Id, entity.Id);
        if (response)
        {
            var index = previousSelectedEntities.FindIndex(o => o.Id == entity.Id);
            var tmp = previousSelectedEntities[index - 1];
            previousSelectedEntities[index - 1] = previousSelectedEntities[index];
            previousSelectedEntities[index] = tmp;
        }

        waiting = false;

        StateHasChanged();
    }

    protected async Task MoveForward(BookEntity entity)
    {
        waiting = true;

        var response = await FirstEntityService.MoveEntityForward(_entity.Id, entity.Id);
        if (response)
        {
            var index = previousSelectedEntities.FindIndex(o => o.Id == entity.Id);
            var tmp = previousSelectedEntities[index + 1];
            previousSelectedEntities[index + 1] = previousSelectedEntities[index];
            previousSelectedEntities[index] = tmp;
        }

        waiting = false;

        StateHasChanged();
    }

    private async Task<BookEntity> InsertEntity(Guid firstEntityId, Guid documentId, Guid secondEntityId)
    {
        var position = await FirstEntityService.GetLastEntityPosition(DocumentId, firstEntityId);

        if (position is null)
        {
            var response = await FirstEntityService.CreateFirstEntity(
                new CreateFirstNodeRequest(
                    firstEntityId,
                    documentId,
                    secondEntityId
                )
            );
            response.EnsureSuccessStatusCode();
        }
        else
        {
            var response = await FirstEntityService.InsertEntityAfterPosition(
                new InsertNodeRequest(
                    position.Id,
                    firstEntityId,
                    documentId,
                    secondEntityId
                )
            );
            response.EnsureSuccessStatusCode();
        }

        var secondEntity = await SecondEntityService.GetEntity(secondEntityId);
        Guard.Against.Null(secondEntity);

        return secondEntity;
    }

    private async Task RemoveEntity(Guid firstEntityId, Guid secondEntityId)
    {
        var position = await FirstEntityService.GetFirstEntityPosition(DocumentId, firstEntityId);

        while (position is not null && position.SecondEntityId != secondEntityId)
            position = await FirstEntityService.GetNextEntityPosition(position.Id);

        Guard.Against.Null(position);
        var response = await FirstEntityService.DeleteEntityAtPosition(position.Id);
        response.EnsureSuccessStatusCode();
    }
}
