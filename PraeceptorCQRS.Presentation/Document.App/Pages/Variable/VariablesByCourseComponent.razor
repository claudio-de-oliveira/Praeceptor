@page "/group/list"

@using Ardalis.GuardClauses;
@using Document.App.Components;
@using Document.App.Dialogs;

@using Newtonsoft.Json;
@using PraeceptorCQRS.Contracts.Entities.Course
@using PraeceptorCQRS.Contracts.Entities.Variable
@using System.Net;

@inherits AuthenticatedPage

<!-- Modal: Editar entidade -->
@if (editEntityDialogIsOpen)
{
    <CreateOrEditVariableDialog OnClose="@OnEditVariableDialogClose" Create="@create" Variable="@currentVariable"></CreateOrEditVariableDialog>
}

<section class="p-1">

    <PageHeaderComponent Institute="@institute" Text="VARIÁVEIS" />

    <article class="content px-4">

        <form class="row g-3">
            <div class="col-md-6">
                <label for="selectCourse" class="form-label">Curso</label>
                <select id="selectCourse" class="form-select form-select-sm" aria-label=".form-select-sm example" @onchange="@((args) => OnCourseChange(args))" style="font-size:small; background-color:aliceblue;">
                    @foreach (var pair in courseName)
                    {
                        <option value=@pair.Key>@pair.Value</option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label for="selectCurriculum" class="form-label">Currículo</label>
                <select id="selectCurriculum" class="form-select form-select-sm" aria-label=".form-select-sm example" @onchange="@((args) => OnCurriculumChange(args))" style="font-size:small; background-color:aliceblue;">
                    @if (curricula.Keys.Contains(selectedCourse))
                    {
                        @foreach (var curriculum in curricula[selectedCourse])
                        {
                            <option value=@curriculum>@curriculum</option>
                        }
                    }
                </select>
            </div>
        </form>

        <br />

        <table class="table table-sm" cellpadding="1" cellspacing="1">
            <thead>
                <tr>
                    <td align="center">
                        <ClearableInputTextComponent Filter="@nameFilter" Waiting="@waiting" OnTextChange="@OnNameChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center">
                        <ClearableInputTextComponent Filter="@valueFilter" Waiting="@waiting" OnTextChange="@OnValueChanged"></ClearableInputTextComponent>
                    </td>
                    <td></td>
                    <td></td>
                </tr>
                <!---->
                <tr>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Variável" SortBy="Name" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Valor" SortBy="Value" OnClick="@SortBy" />
                    </td>
                    <td></td>
                    <td></td>
                </tr>
                <!---->

                <tr>
                    <td>Variável</td>
                    <td>Valor</td>
                    <td></td>
                    <td></td>
                </tr>
            </thead>
            <tbody>
                @foreach (var variable in variables)
                {
                    <ConfirmDialog Title="Atenção"
                               Message=@($"Tem certeza que deseja excluir a tabela \"{variable.GroupName}.{variable.VariableName}\" ?")
                               OnConfirmEvent="@OnDelete"
                               ParameterId="@variable.Id" />

                    <tr>
                        <td>
                            <div style="font-size: smaller">
                                @(variable.GroupName).@(variable.VariableName)
                            </div>
                        </td>
                        <td>
                            <div style="font-size: smaller">
                                @variable.Value
                            </div>
                        </td>
                        <td>
                            <button type="button"
                                class="btn btn-sm btn-edit"
                                data-toggle="tooltip"
                                data-placement="top"
                                data-bs-toggle="modal"
                                data-bs-target="#editSectionModal"
                                title="Editar"
                                disabled="@(!variable.IsDeletable)"
                                @onclick="@(() => OnEdit(variable))"
                                >
                                <i class="bi bi-pencil"></i>
                                Editar
                            </button>
                        </td>
                        <td>
                            <button type="button"
                                class="btn btn-sm btn-delete"
                                data-toggle="tooltip"
                                data-placement="top"
                                data-bs-toggle="modal"
                                disabled="@(!variable.IsDeletable)"
                                data-bs-target="#@($"A{variable.Id.ToString("N")}")"
                                title="Excluir"
                                >
                                <i class="bi bi-trash"></i>
                                Excluir
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <br />
        <div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
            <div class="btn-group" role="group" aria-label="First group">
                <button type="button"
                        class="btn btn-outline-primary"
                        data-toggle="tooltip"
                        data-placement="top"
                        data-bs-toggle="modal"
                        disabled="@(waiting || !CanCreate())"
                        title="Criar uma nova variável"
                        @onclick="() => OnCreate()">
                    <i class="bi bi-plus"></i>
                    Criar uma nova variável
                </button>
            </div>

            <PageNavigationComponent CurrentPage="@currentPage" NumberOfPages="@numberOfPages" GotoPage="@OnPageChange"></PageNavigationComponent>

        </div>
    </article>
</section>


@code {
    [Inject]
    protected IInstituteService InstituteService { get; set; } = default!;
    [Inject]
    private ICourseService courseService { get; set; } = default!;
    [Inject]
    private IComponentService componentService { get; set; } = default!;
    [Inject]
    protected IVariableXService variableService { get; set; } = default!;

    private bool waiting = false;

    private Dictionary<Guid, string> courseName = new();
    private Dictionary<Guid, List<int>> curricula = new();
    private List<VariableXModel> variables = new();

    private VariableXModel? currentVariable;

    private InstituteModel? institute;

    private Guid selectedCourse = Guid.Empty;
    private int selectedCurriculum = -1;

    private bool editEntityDialogIsOpen = false;
    private bool create = false;

    protected string? nameFilter = string.Empty;
    protected string? valueFilter = string.Empty;
    protected bool ascendingSort = false;
    protected string? sort = "Name";

    private readonly int pageSize = 10;
    protected int currentPage = 0;
    protected int previousPage = -1;
    protected int nextPage = -1;
    protected int numberOfPages = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            waiting = true;
            institute = await InstituteService.GetInstituteById(_userInstituteId);

            if (institute is null)
            {
                var responseMessage = InstituteService.GetHttpResponseMessage();

                _toasterService?.AddToastError(responseMessage?.StatusCode switch
                {
                    HttpStatusCode.Unauthorized => "Você não está autorizado a acessar as informações sobre este instituto",
                    HttpStatusCode.NotFound => "O instituto em que você foi alocado não foi encontrado",
                    _ => "Não foi possível acessar as informações sobre o instituto."
                });
            }
            else
            {
                var message = await courseService.PostPage(new GetCoursePageRequest(
                    _userInstituteId,
                    0,
                    int.MaxValue,
                    "Name",
                    true,
                    null,
                    null,
                    -1,
                    -1,
                    -1,
                    null,
                    null,
                    null,
                    null
                ));

                if (message.IsSuccessStatusCode)
                {
                    var content = await message.Content.ReadAsStringAsync();
                    var tmp = JsonConvert.DeserializeObject<PageOfCourse>(content);
                    Guard.Against.Null(tmp);
                    var courseList = tmp.Entities.Select(o => (CourseModel)o).ToList();
                    courseList.ForEach(o => courseName.Add(o.Id, o.Name));

                    foreach (var course in courseList)
                        curricula.Add(course.Id, await ReadCurricula(course.Id));

                    if (courseList.Any())
                    {
                        selectedCourse = courseList[0].Id;
                        if (curricula.Any())
                            if (curricula[selectedCourse].Any())
                                selectedCurriculum = curricula[selectedCourse][0];
                    }

                }
                else
                {
                    await OnHttpErrorMessage(message);
                }
            }
            waiting = false;

            await PageRequest(0);

            StateHasChanged();
        }
    }

    protected async Task OnPageChange(int page)
    {
        await PageRequest(page);
    }

    private bool CanCreate()
    {

        return true;
    }

    private async void OnDelete(object? source, Guid id)
    {
        var message = await variableService.DeleteVariable(id);
        if (message.IsSuccessStatusCode)
        {
            _toasterService?.AddToastSuccess("A variável foi excluída com sucesso");
            variables.Remove(variables.Find(o => o.Id == id)!);
            StateHasChanged();
        }
        else
        {
            await OnHttpErrorMessage(message);
        }
    }

#pragma warning disable CS8602
    protected async Task OnNameChanged(ChangeEventArgs args)
    {
        nameFilter = args.Value.ToString();
        await PageRequest(0);
    }
    protected async Task OnValueChanged(ChangeEventArgs args)
    {
        valueFilter = args.Value.ToString();
        await PageRequest(0);
    }
#pragma warning restore CS8602

    protected async void SortBy(string SortColumn)
    {
        ascendingSort = !ascendingSort;
        sort = SortColumn;
        await PageRequest(currentPage);
    }


    private void OnEdit(VariableXModel variable)
    {
        currentVariable = variable;
        create = false;
        editEntityDialogIsOpen = true;
        StateHasChanged();
    }

    private void OnCreate()
    {
        currentVariable = new VariableXModel
        {
            Id = Guid.NewGuid(),
            GroupId = selectedCourse,
            GroupName = "",
            Curriculum = selectedCurriculum,
            VariableName = "",
            Value = ""
        };
        create = true;
        editEntityDialogIsOpen = true;
        StateHasChanged();
    }

    private async Task OnEditVariableDialogClose(VariableXModel? variable)
    {
        if (variable is not null)
        {
            if (create)
            {
                var message = await variableService.CreateVariableByCourse(
                    new CreateVariableXRequest(
                        variable.GroupName,
                        selectedCourse,
                        selectedCurriculum,
                        variable.VariableName,
                        variable.Value
                    ));

                if (message.IsSuccessStatusCode)
                {
                    var content = await message.Content.ReadAsStringAsync();
                    var created = JsonConvert.DeserializeObject<VariableXModel>(content);
                    Guard.Against.Null(created);
                    variables.Add(created);
                }
                else
                {
                    await OnHttpErrorMessage(message);
                }
            }
            else
            {
                var message = await variableService.UpdateVariableByCourse(
                    new UpdateVariableXRequest(
                        variable.Id,
                        variable.Value
                    ));

                if (message.IsSuccessStatusCode)
                {
                    var tmp = variables.Find(o => o.Id == variable.Id);
                    Guard.Against.Null(tmp);
                    tmp.Value = variable.Value;
                }
                else
                { 
                    await OnHttpErrorMessage(message);
                }
            }
        }

        editEntityDialogIsOpen = false;
        StateHasChanged();
    }

    private async Task PageRequest(int page)
    {
        var response = await variableService.PostPage(
            new GetVariableXPageRequest(
                _userHoldingId,
                _userInstituteId,
                selectedCourse, 
                selectedCurriculum,
                page,
                pageSize,
                sort,
                ascendingSort,
                nameFilter,
                valueFilter
                )
            );

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            var tmp = JsonConvert.DeserializeObject<PageOfVariableX>(content);
            Guard.Against.Null(tmp);
            variables = tmp.Entities;
            currentPage = tmp.CurrentPage;
            previousPage = tmp.PreviousPage;
            nextPage = tmp.NextPage;
            numberOfPages = tmp.NumberOfPages;
        }
        else
        {
            await OnHttpErrorMessage(response);
        }

        StateHasChanged();
    }

    private async Task<List<int>> ReadCurricula(Guid courseId)
    {
        var result = await componentService.GetCurriculaByCourseId(courseId);

        return (result is not null)
            ? result.Select(o => o.Curriculum).ToList()
            : new() { -1 };
    }

    private async void OnCourseChange(ChangeEventArgs args)
    {
        Guard.Against.Null(args.Value);
        selectedCourse = new Guid((string)args.Value);
        if (curricula.Any())
            if (curricula[selectedCourse].Any())
                selectedCurriculum = curricula[selectedCourse][0];

        await PageRequest(0);
    }

    private async void OnCurriculumChange(ChangeEventArgs args)
    {
        Guard.Against.Null(args.Value);
        selectedCurriculum = int.Parse((string)args.Value);

        await PageRequest(0);
    }
}
