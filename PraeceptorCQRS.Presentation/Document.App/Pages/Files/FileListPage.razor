@page "/file/list"

@inherits AuthenticatedPage

@attribute [Authorize]

@using Ardalis.GuardClauses
@using Document.App.Components
@using Document.App.Components.Toaster
@using Document.App.Dialogs
@using Microsoft.AspNetCore.Mvc;
@using Newtonsoft.Json
@using PraeceptorCQRS.Contracts.Entities.DocumentTemplate
@using PraeceptorCQRS.Contracts.Entities.SqlFileStream
@using PraeceptorCQRS.Utilities

<!-- Modal: Editar entidade -->
@if (EditEntityDialogIsOpen)
{
    <NewFileStreamDialog OnClose="@OnEditFileModelDialogClose" />
}

<section class="p-1">

    <PageHeaderComponent Institute="@institute" Text="ARQUIVOS" />

    <article class="content px-4">
        <table class="table table-sm" cellpadding="1" cellspacing="1">
            <thead>
                <tr>
                    <td align="center">
                        <ClearableInputTextComponent Filter="@nameFilter" Waiting="@waiting" OnTextChange="@OnNameChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center">
                        <ClearableInputTextComponent Filter="@titleFilter" Waiting="@waiting" OnTextChange="@OnTitleChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center">
                        <ClearableInputTextComponent Filter="@sourceFilter" Waiting="@waiting" OnTextChange="@OnSourceChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center">
                        <ClearableInputTextComponent Filter="@descriptionFilter" Waiting="@waiting" OnTextChange="@OnDescriptionChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center"></td>
                    <td align="center"></td>
                </tr>
                <!---->
                <tr>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Nome" SortBy="Name" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Título" SortBy="Title" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Fonte" SortBy="Source" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Descrição" SortBy="Description" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Criação" SortBy="DateCreated" OnClick="@SortBy" />
                    </td>
                    <td align="center"></td>
                </tr>
                <!---->
            </thead>
            <tbody>
                @foreach (var entity in entityList)
                {
                    <ConfirmDialog Title="Atenção"
                               Message=@($"Tem certeza que deseja excluir o arquivo \"{entity.Name}\" ?")
                               OnConfirmEvent="@Delete"
                               ParameterId="@entity.Id" />

                    <tr>
                        <td>
                            <div style="font-size: smaller">@TextToDisplay(entity.Name)</div>
                        </td>
                        <td>
                            <div style="font-size: smaller">@TextToDisplay(entity.Title)</div>
                        </td>
                        <td>
                            <div style="font-size: smaller">@TextToDisplay(entity.Source)</div>
                        </td>
                        <td>
                            <div style="font-size: smaller">@TextToDisplay(entity.Description)</div>
                        </td>
                        <td align="center" style="font-size: smaller">
                            @Global.ConvertDateTimeToString(entity.DateCreated)
                        </td>
                        <td align="right" style="width:120px">
                            <button type="button"
                                class="btn btn-sm btn-delete"
                                data-toggle="tooltip"
                                data-placement="top"
                                data-bs-toggle="modal"
                                disabled="@(waiting || !CanDelete(entity))"
                                data-bs-target="#@($"A{entity.Id.ToString("N")}")"
                                title="Excluir">
                                <i class="bi bi-trash"></i>
                                Excluir
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
            <div class="btn-group" role="group" aria-label="First group">
                <button type="button"
                        class="btn btn-outline-primary"
                        data-toggle="tooltip"
                        data-placement="top"
                        data-bs-toggle="modal"
                        disabled="@waiting"
                        title="Acrescentar um novo capítulo"
                        @onclick="() => OnCreate()">
                    <i class="bi bi-plus-lg"></i>
                    Acrescentar um novo arquivo
                </button>
            </div>
            <PageNavigationComponent CurrentPage="@currentPage" NumberOfPages="@numberOfPages" GotoPage="@OnPageChange"></PageNavigationComponent>
        </div>
    </article>
</section>

@code {
    [Inject]
    protected IInstituteService InstituteService { get; set; } = default!;
    [Inject]
    private IFileStreamService fileStreamService { get; set; } = default!;

    protected List<FileModel> entityList = new();

    protected bool ascendingSort = false;
    protected string? sort = "DateCreated";
    private string Name { get; set; } = default!;
    private string? Title { get; set; }
    private string? Source { get; set; }
    private string? Description { get; set; }
    private DateTime DateCreated { get; set; }

    protected FileModel? entitySelected = null!;
    protected string previousName = string.Empty;
    protected string? previousTitle = string.Empty;
    protected string? previousSource = string.Empty;
    protected string? previousDescription = string.Empty;

    protected string? nameFilter = string.Empty;
    protected string? titleFilter = string.Empty;
    protected string? sourceFilter = string.Empty;
    protected string? descriptionFilter = string.Empty;
    protected string? dateCreatedFilter = string.Empty;
    protected string? contentTypeFilter = string.Empty;

    protected bool EditEntityDialogIsOpen = false;

    private readonly int pageSize = 10;
    protected int currentPage = 0;
    protected int previousPage = -1;
    protected int nextPage = -1;
    protected int numberOfPages = 0;

    protected bool waiting = true;
    protected bool created = false;

    protected byte[] Data = default!;

    protected string TextToDisplay(string? text, int maxLength = 200)
        => text is not null && text.Length < maxLength ? text : text?.Substring(0, maxLength) + "...";

    private InstituteModel? institute;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            institute = await InstituteService.GetInstituteById(_userInstituteId);
            Guard.Against.Null(institute);

            EditEntityDialogIsOpen = false;
            await PageRequest(currentPage);
        }
    }

    protected async Task OnPageChange(int page)
    {
        await PageRequest(page);
    }

#pragma warning disable CS8602
    protected async Task OnNameChanged(ChangeEventArgs args)
    {
        nameFilter = args.Value.ToString();
        await PageRequest(0);
    }
    protected async Task OnTitleChanged(ChangeEventArgs args)
    {
        titleFilter = args.Value.ToString();
        await PageRequest(0);
    }
    protected async Task OnSourceChanged(ChangeEventArgs args)
    {
        sourceFilter = args.Value.ToString();
        await PageRequest(0);
    }
    protected async Task OnDescriptionChanged(ChangeEventArgs args)
    {
        descriptionFilter = args.Value.ToString();
        await PageRequest(0);
    }
#pragma warning restore CS8602

    protected async void SortBy(string SortColumn)
    {
        ascendingSort = !ascendingSort;
        sort = SortColumn;
        await PageRequest(currentPage);
    }

    protected virtual async Task PageRequest(int page)
    {
        waiting = true;
        var message = await fileStreamService.GetFileStreamPage(
            new GetFilePageRequest(
                _userInstituteId,
                page,
                pageSize,
                sort,
                ascendingSort,
                nameFilter,
                titleFilter,
                sourceFilter,
                descriptionFilter,
                contentTypeFilter,
                dateCreatedFilter
            )
        );

        if (message.IsSuccessStatusCode)
        {
            var content = await message.Content.ReadAsStringAsync();
            var tmp = JsonConvert.DeserializeObject<PageOfFile>(content);
            Guard.Against.Null(tmp);
            entityList = tmp.Entities.Select(o => (FileModel)o).ToList();
            currentPage = tmp.CurrentPage;
            previousPage = tmp.PreviousPage;
            nextPage = tmp.NextPage;
            numberOfPages = tmp.NumberOfPages;
        }
        else
        {
            await OnHttpErrorMessage(message);
        }
        waiting = false;

        StateHasChanged();
    }

    protected virtual void OnCreate()
    {
        EditEntityDialogIsOpen = true;
        StateHasChanged();
    }

    protected virtual async Task OnEditFileModelDialogClose(FileModel? model)
    {
        if (model is not null)
        {
            waiting = true;

            HttpResponseMessage response;

            response = await fileStreamService.CreateFileStream(
                new CreateFileRequest(
                    model.Name,
                    model.Title,
                    model.Source,
                    model.Description,
                    model.Data,
                    model.ContentType,
                    _userInstituteId
                )
            );

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                _toasterService?.AddToastSuccess("As modificações foram salvas.");
                previousName = model.Name;
                previousTitle = model.Title;
                previousSource = model.Source;
                previousDescription = model.Description;
                await PageRequest(currentPage);
            }
            else
            {
                await OnHttpErrorMessage(response);

                Guard.Against.Null(entitySelected);
                entitySelected.Name = previousName;
                entitySelected.Title = previousTitle;
                entitySelected.Source = previousSource;
                entitySelected.Description = previousDescription;
            }

            waiting = false;
        }

        EditEntityDialogIsOpen = false;

        StateHasChanged();
    }

    protected bool CanDelete(FileModel entity)
    {
        return true;
    }

    private async void Delete(object? source, Guid id)
    {
        var response = await fileStreamService.DeleteFileStream(id);

        if (response.IsSuccessStatusCode)
        {
            entityList.Remove(entityList.Find(o => o.Id == id)!);
            await PageRequest(currentPage);
            _toasterService?.AddToastSuccess("O arquivo foi excluído com sucesso.");
        }
        else
        {
            await OnHttpErrorMessage(response);
        }
    }

}
