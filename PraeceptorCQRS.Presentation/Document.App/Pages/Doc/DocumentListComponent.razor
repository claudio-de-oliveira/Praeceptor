@page "/document/list"

@attribute [Authorize]

@using Ardalis.GuardClauses
@using Document.App.Components
@using Document.App.Dialogs
@using Microsoft.AspNetCore.Mvc;
@using Newtonsoft.Json;
@using PraeceptorCQRS.Contracts.Entities.Course;
@using PraeceptorCQRS.Utilities
@using PraeceptorCQRS.Contracts.Entities.ToWord
@using PraeceptorCQRS.Contracts.Entities.SqlFileStream;
@using System.Net;

@inject NavigationManager navigationManager

@inherits AbstractListPage<IDocumentListService>

@if (institute is not null)
{
    <!-- Modal: Editar entidade -->
    @if (EditEntityDialogIsOpen)
    {
        <EditEntityDialog Title="@previousTitle" Text="@previousText" OnClose="@OnEditEntityDialogClose" />
    }
    @if (ToDocxDialogIsOpen)
    {
        <ToDocxDialog Courses="@courseList" Templates="@templates" OnClose="@OnToDocxDialogClose" />
    }

    <section class="p-1">

        <PageHeaderComponent Institute="@institute" Text="PLANOS PEDAGÓGICOS DE CURSO" />

        <article class="content px-4">
            <table class="table table-sm" cellpadding="1" cellspacing="1">
                <thead>
                    <tr>
                        <td align="center" colspan="4">
                            <ClearableInputTextComponent Placeholder="Filtrar por Título" Filter="@titleFilter" Waiting="@waiting" OnTextChange="@OnTitleChanged"></ClearableInputTextComponent>
                        </td>
                        <td align="center" colspan="2">
                            <ClearableInputTextComponent Placeholder="Filtrar por Criador" Filter="@createdByFilter" Waiting="@waiting" OnTextChange="@OnCreatedByChanged"></ClearableInputTextComponent>
                        </td>
                        <td align="center" colspan="2">
                            <ClearableInputTextComponent Placeholder="Filtrar por Modificador" Filter="@lastModifiedByFilter" Waiting="@waiting" OnTextChange="@OnLastModifiedByChanged"></ClearableInputTextComponent>
                        </td>
                    </tr>
                    <!---->
                    <tr>
                        <td align="center">
                            <ButtonSortComponent Waiting="@waiting" Text="Título" SortBy="Title" OnClick="@SortBy" />
                        </td>
                        <th></th>
                        <th></th>
                        <th></th>
                        <td align="center">
                            <ButtonSortComponent Waiting="@waiting" Text="Criação" SortBy="Created" OnClick="@SortBy" />
                        </td>
                        <td align="center">
                            <ButtonSortComponent Waiting="@waiting" Text="Criado por ..." SortBy="CreatedBy" OnClick="@SortBy" />
                        </td>
                        <td align="center">
                            <ButtonSortComponent Waiting="@waiting" Text="Modificação" SortBy="LastModified" OnClick="@SortBy" />
                        </td>
                        <td align="center">
                            <ButtonSortComponent Waiting="@waiting" Text="Modificado por ..." SortBy="LastModifiedBy" OnClick="@SortBy" />
                        </td>
                    </tr>
                    <!---->
                </thead>
                <tbody>
                    @foreach (var entity in entityList)
                    {
                        <tr>
                            <td>
                                <div style="font-size: smaller">
                                    @TextToDisplay(entity.Title, 50)
                                </div>
                            </td>
                            <td align="right" style="width: 80px;">
                                <button type="button"
                                    class="btn btn-sm btn-success"
                                    data-toggle="tooltip"
                                    data-placement="top"
                                    title="Ver detalhes"
                                    @onclick="@(() => Details(entity))"
                                    style="border: none;">
                                    Detalhes
                                </button>
                            </td>
                            <td align="right" style="width: 80px;">
                                <button type="button"
                                    class="btn btn-sm btn-warning"
                                    data-toggle="tooltip"
                                    data-placement="top"
                                    data-bs-toggle="modal"
                                    data-bs-target="#editDocumentModal"
                                    title="Editar"
                                    @onclick="@(() => Edit(entity))"
                                    style="border: none;">
                                    Editar
                                </button>
                            </td>
                            <td align="right" style="width: 80px;">
                                <button type="button"
                                    class="btn btn-sm btn-primary"
                                    data-toggle="tooltip"
                                    data-placement="top"
                                    title="Gerar documento Word"
                                    @onclick="@(() => Print(entity))"
                                    style="border: none;">
                                    Word
                                </button>
                            </td>
                            <td align="center">
                                <div style="font-size: smaller">@Global.ConvertDateTimeToString(entity.Created)</div>
                            </td>
                            <td align="center">
                                <div style="font-size: smaller">@entity.CreatedBy</div>
                            </td>
                            <td align="center">
                                <div style="font-size: smaller">@Global.ConvertDateTimeToString(entity.LastModified)</div>
                            </td>
                            <td align="center">
                                <div style="font-size: smaller">@entity.LastModifiedBy</div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
                <div class="btn-group" role="group" aria-label="First group">
                    <button type="button"
                        class="btn btn-outline-primary"
                        data-toggle="tooltip"
                        data-placement="top"
                        data-bs-toggle="modal"
                        disabled="@waiting"
                        title="Criar um novo documento"
                        @onclick="() => OnCreate()">
                        <i class="bi bi-plus-lg"></i>
                        Criar um novo documento
                    </button>
                </div>
                <PageNavigationComponent CurrentPage="@currentPage" NumberOfPages="@numberOfPages" GotoPage="@OnPageChange"></PageNavigationComponent>
            </div>
        </article>
    </section>
}

@code {
    [Inject]
    protected IInstituteService InstituteService { get; set; } = default!;
    [Inject]
    protected IDocxStreamService DocxStreamService { get; set; } = default!;
    [Inject]
    private ICourseService courseService { get; set; } = default!;
    [Inject]
    private IFileStreamService fileService { get; set; } = default!;

    private InstituteModel? institute;

    private bool ToDocxDialogIsOpen = false;
    private List<CourseModel>? courseList = default!;
    private List<FileModel>? templates = default;

    private BookEntity? entityToPrint;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            institute = await InstituteService.GetInstituteById(_userInstituteId);

            if (institute is null)
            {
                var responseMessage = InstituteService.GetHttpResponseMessage();

                _toasterService?.AddToastError(responseMessage?.StatusCode switch
                {
                    HttpStatusCode.Unauthorized => "Você não está autorizado a acessar as informações sobre este instituto",
                    HttpStatusCode.NotFound => "O instituto em que você foi alocado não foi encontrado",
                    _ => "Não foi possível acessar as informações sobre o instituto."
                });
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnToDocxDialogClose(ConvertPpcToDocxRequest? request)
    {
        if (request is not null) 
        {
            var response = await DocxStreamService.CreateDocxStream(
                new ConvertPpcToDocxRequest(
                    request.CourseId,
                    request.Curriculum,
                    request.Description,
                    entityToPrint!.Id,
                    request.TemplateId,
                    Guid.Empty,
                    request.GroupValues,
                    _userName
                )
            );

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Guard.Against.Null(content);
                Console.WriteLine(content);
                var fileId = JsonConvert.DeserializeObject<Guid>(content);
                _toasterService?.AddToastSuccess($"Gerando documento {fileId}");
            }
            else
            {
                await OnHttpErrorMessage(response);
            }
        }

        entityToPrint = null;

        ToDocxDialogIsOpen = false;

        StateHasChanged();
    }

    private async Task<List<FileModel>?> ReadTemplates(Guid instituteId)
    {
        var response = await fileService.GetFileStreamPage(
            new GetFilePageRequest(
                instituteId,
                0,
                int.MaxValue,
                "Name",
                true,
                null,
                null,
                null,
                null,
                "application/vnd.openxmlformats-officedocument.wordprocessingml.template",
                null
            )
        );

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            Guard.Against.Null(content);
            Console.WriteLine(content);
            var page = JsonConvert.DeserializeObject<PageOfFile>(content);
            Guard.Against.Null(page);

            return page.Entities;
        }
        else
        {
            await OnHttpErrorMessage(response);

            return null;
        }
    }

    private async Task<List<CourseModel>?> ReadCourses(Guid instituteId)
    {
        var response = await courseService.PostPage(
            new GetCoursePageRequest(
                instituteId,
                0,
                int.MaxValue,
                "Name",
                true,
                null,
                null,
                -1,
                -1,
                -1,
                null,
                null,
                null,
                null
            )
        );

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            Guard.Against.Null(content);
            Console.WriteLine(content);
            var page = JsonConvert.DeserializeObject<PageOfCourse>(content);
            Guard.Against.Null(page);

            return page.Entities;
        }
        else
        {
            await OnHttpErrorMessage(response);

            return null;
        }
    }

    private async Task Print(BookEntity doc)
    {
        templates = await ReadTemplates(_userInstituteId);
        if (templates is null)
            return;
        courseList = await ReadCourses(_userInstituteId);
        if (courseList is null)
            return;

        entityToPrint = doc;

        ToDocxDialogIsOpen = true;

        StateHasChanged();
    }

    private void Details(BookEntity doc)
    {
        navigationManager.NavigateTo($"/document/details/{doc.Id}");
    }
}
