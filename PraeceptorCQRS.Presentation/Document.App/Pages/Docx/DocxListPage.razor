@page "/docx/list"

@inherits AuthenticatedPage

@attribute [Authorize]

@using Ardalis.GuardClauses
@using Document.App.Components
@using Document.App.Components.Toaster
@using Document.App.Dialogs
@using Document.App.DownloadFile.Interfaces;
@using Document.App.DownloadFile.Utils;
@using Microsoft.AspNetCore.Mvc;
@using Newtonsoft.Json
@using PraeceptorCQRS.Contracts.Entities.DocumentTemplate
@using PraeceptorCQRS.Contracts.Entities.SqlDocxStream;
@using PraeceptorCQRS.Contracts.Entities.SqlFileStream
@using PraeceptorCQRS.Utilities
@using System.Runtime.CompilerServices;
@using System.Net;

@if (institute is not null)
{
    <section class="p-1">

        <PageHeaderComponent Institute="@institute" Text="DOCUMENTOS WORD" />

        <article class="content px-4">
            <table class="table table-sm" cellpadding="1" cellspacing="1">
                <thead>
                    <tr>
                        <td align="center">
                            @*
                        <ClearableInputTextComponent Filter="@nameFilter" Waiting="@waiting" OnTextChange="@OnNameChanged"></ClearableInputTextComponent>
                        *@
                        </td>
                        <td align="center">
                            <ClearableInputTextComponent Filter="@titleFilter" Waiting="@waiting" OnTextChange="@OnTitleChanged"></ClearableInputTextComponent>
                        </td>
                        <td align="center">
                            <ClearableInputTextComponent Filter="@descriptionFilter" Waiting="@waiting" OnTextChange="@OnDescriptionChanged"></ClearableInputTextComponent>
                        </td>
                        <td></td>
                        <td align="center">
                            <ClearableInputTextComponent Filter="@createdByFilter" Waiting="@waiting" OnTextChange="@OnCreatedByChanged"></ClearableInputTextComponent>
                        </td>
                        <td></td>
                        <td></td>
                    </tr>
                    <!---->
                    <tr>
                        <td align="center">
                            <ButtonSortComponent Waiting="@waiting" Text="Nome" SortBy="Name" OnClick="@SortBy" />
                        </td>
                        <td align="center">
                            <ButtonSortComponent Waiting="@waiting" Text="Título" SortBy="Title" OnClick="@SortBy" />
                        </td>
                        <td align="center">
                            <ButtonSortComponent Waiting="@waiting" Text="Descrição" SortBy="Description" OnClick="@SortBy" />
                        </td>
                        <td align="center">
                            <ButtonSortComponent Waiting="@waiting" Text="Criação" SortBy="DateCreated" OnClick="@SortBy" />
                        </td>
                        <td align="center">
                            <ButtonSortComponent Waiting="@waiting" Text="Criador" SortBy="CreatedBy" OnClick="@SortBy" />
                        </td>
                        <td></td>
                        <td></td>
                    </tr>
                    <!---->
                </thead>
                <tbody>
                    @foreach (var entity in entityList)
                    {
                        <tr>
                            <td>
                                <div style="font-size: smaller">@entity.Id</div>
                            </td>
                            <td>
                                <div style="font-size: smaller">@TextToDisplay(entity.Title)</div>
                            </td>
                            <td>
                                <div style="font-size: smaller">@TextToDisplay(entity.Description)</div>
                            </td>
                            <td align="center" style="font-size: smaller">
                                @Global.ConvertDateTimeToString(entity.DateCreated)
                            </td>
                            <td>
                                <div style="font-size: smaller">@entity.CreatedBy</div>
                            </td>
                            <td>
                                <button type="button"
                                class="btn btn-sm btn-primary"
                                data-toggle="tooltip"
                                data-placement="top"
                                data-bs-toggle="modal"
                                disabled="@waiting"
                                title="Baixar o documento"
                                @onclick="() => OnDownload(entity.Id)">
                                    <i class="bi bi-cloud-download"></i>
                                    Baixar
                                </button>
                            </td>
                            <td>
                                <button type="button"
                                class="btn btn-sm btn-danger"
                                data-toggle="tooltip"
                                data-placement="top"
                                data-bs-toggle="modal"

                                disabled="@waiting"
                                title="Excluir"
                                @onclick="() => OnDelete(entity.Id)">
                                    <i class="bi bi-x"></i>
                                    Excluir
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
                <div class="btn-group" role="group" aria-label="First group">
                </div>
                <PageNavigationComponent CurrentPage="@currentPage" NumberOfPages="@numberOfPages" GotoPage="@OnPageChange"></PageNavigationComponent>
            </div>
        </article>


        @*
        <InputFile></InputFile>
    <div class="container">
        <div class="mb-3 mt-3">
            <form method="post" enctype="multipart/form-data">
                <div class="mb-3">
                    <label class="form-label">Arquivo</label>
                    <input id="inputfile" type="file" class="form-control" />
                </div>
                <div class="mb-3">
                    <button type="submit" class="btn btn-primary">Upload</button>
                </div>
            </form>
        </div>
    </div>
    *@
    </section>
}

@code {
    [Inject]
    protected IInstituteService InstituteService { get; set; } = default!;
    [Inject]
    private IDocxStreamService docxStreamService { get; set; } = default!;

    protected List<DocxModel> entityList = new();

    protected bool ascendingSort = false;
    protected string? sort = "DateCreated";
    private string Name { get; set; } = default!;
    private string? Title { get; set; }
    private string? Source { get; set; }
    private string? Description { get; set; }
    private DateTime DateCreated { get; set; }

    protected DocxModel? entitySelected = null!;
    protected string previousName = string.Empty;
    protected string? previousTitle = string.Empty;
    protected string? previousSource = string.Empty;
    protected string? previousDescription = string.Empty;

    protected string? titleFilter = string.Empty;
    protected string? createdByFilter = string.Empty;
    protected string? descriptionFilter = string.Empty;
    protected string? dateCreatedFilter = string.Empty;
    protected string? contentTypeFilter = string.Empty;

    private readonly int pageSize = 10;
    protected int currentPage = 0;
    protected int previousPage = -1;
    protected int nextPage = -1;
    protected int numberOfPages = 0;

    protected bool waiting = true;
    protected bool created = false;

    protected byte[] Data = default!;

    private bool hidden = true;

    protected string TextToDisplay(string? text, int maxLength = 200)
        => text is not null && text.Length < maxLength ? text : text?.Substring(0, maxLength) + "...";

    private InstituteModel? institute;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            institute = await InstituteService.GetInstituteById(_userInstituteId);

            if (institute is null)
            {
                var responseMessage = InstituteService.GetHttpResponseMessage();

                _toasterService?.AddToastError(responseMessage?.StatusCode switch
                {
                    HttpStatusCode.Unauthorized => "Você não está autorizado a acessar as informações sobre este instituto",
                    HttpStatusCode.NotFound => "O instituto em que você foi alocado não foi encontrado",
                    _ => "Não foi possível acessar as informações sobre o instituto."
                });
            }
            else
            {
                await PageRequest(currentPage);
            }
        }
    }

    protected async Task OnPageChange(int page)
    {
        await PageRequest(page);
    }

#pragma warning disable CS8602
    protected async Task OnTitleChanged(ChangeEventArgs args)
    {
        titleFilter = args.Value.ToString();
        await PageRequest(0);
    }
    protected async Task OnDescriptionChanged(ChangeEventArgs args)
    {
        descriptionFilter = args.Value.ToString();
        await PageRequest(0);
    }
    protected async Task OnCreatedByChanged(ChangeEventArgs args)
    {
        createdByFilter = args.Value.ToString();
        await PageRequest(0);
    }
#pragma warning restore CS8602

    protected async void SortBy(string SortColumn)
    {
        ascendingSort = !ascendingSort;
        sort = SortColumn;
        await PageRequest(currentPage);
    }

    protected virtual async Task PageRequest(int page)
    {
        waiting = true;
        var message = await docxStreamService.GetDocxStreamPage(
            new GetDocxPageRequest(
                _userInstituteId,
                page,
                pageSize,
                sort,
                ascendingSort,
                titleFilter,
                descriptionFilter,
                contentTypeFilter,
                dateCreatedFilter,
                _userName
            )
        );

        if (message.IsSuccessStatusCode)
        {
            var content = await message.Content.ReadAsStringAsync();
            var tmp = JsonConvert.DeserializeObject<PageOfDocx>(content);
            Guard.Against.Null(tmp);
            entityList = tmp.Entities;
            currentPage = tmp.CurrentPage;
            previousPage = tmp.PreviousPage;
            nextPage = tmp.NextPage;
            numberOfPages = tmp.NumberOfPages;
        }
        else
        {
            await OnHttpErrorMessage(message);
        }
        waiting = false;

        StateHasChanged();
    }

    protected async Task OnDownload(Guid id)
    {
        var model = await docxStreamService.GetDocxStreamById(id);

        if (model is not null)
        {
            hidden = false;
            using var writer = new BinaryWriter(File.OpenWrite($"D:\\Download\\{model.Id}.docx"));
            writer.Write(model.Data);
            writer.Close();
            hidden = true;

            StateHasChanged();

            _toasterService?.AddToastSuccess($"Documento salvo como {model.Id}.docx");
        }
        else
        {
            _toasterService?.AddToastError("Não consegui ler o documento.");
        }
    }

    protected async Task OnDelete(Guid id)
    {
        var message = await docxStreamService.DeleteDocxStream(id);
        if (message.IsSuccessStatusCode)
        {
            entityList.Remove(entityList.Find(o => o.Id == id)!);
            _toasterService?.AddToastSuccess("o documento foi excluído com sucesso!");
        }
        else
        {
            await OnHttpErrorMessage(message);
        }
    }
}
