@page "/docx/list"

@inherits AuthenticatedPage

@attribute [Authorize]

@using Ardalis.GuardClauses
@using Document.App.Components
@using Document.App.Components.Toaster
@using Document.App.Dialogs
@using Document.App.DownloadFile.Interfaces;
@using Document.App.DownloadFile.Utils;
@using Microsoft.AspNetCore.Mvc;
@using Newtonsoft.Json
@using PraeceptorCQRS.Contracts.Entities.DocumentTemplate
@using PraeceptorCQRS.Contracts.Entities.SqlDocxStream;
@using PraeceptorCQRS.Contracts.Entities.SqlFileStream
@using PraeceptorCQRS.Utilities
@using Microsoft.JSInterop;

<section class="p-1">

    <PageHeaderComponent Institute="@institute" Text="Documentos Word" />

    <article class="content px-4">
        <table class="table table-sm" cellpadding="1" cellspacing="1">
            <thead>
                <tr>
                    <td align="center">
                        @*
                        <ClearableInputTextComponent Filter="@nameFilter" Waiting="@waiting" OnTextChange="@OnNameChanged"></ClearableInputTextComponent>
                        *@
                    </td>
                    <td align="center">
                        <ClearableInputTextComponent Filter="@titleFilter" Waiting="@waiting" OnTextChange="@OnTitleChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center">
                        <ClearableInputTextComponent Filter="@descriptionFilter" Waiting="@waiting" OnTextChange="@OnDescriptionChanged"></ClearableInputTextComponent>
                    </td>
                    <td align="center">
                        <ClearableInputTextComponent Filter="@createdByFilter" Waiting="@waiting" OnTextChange="@OnCreatedByChanged"></ClearableInputTextComponent>
                    </td>
                    <td></td>
                    <td></td>
                </tr>
                <!---->
                <tr>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Nome" SortBy="Name" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Título" SortBy="Title" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Descrição" SortBy="Description" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Criação" SortBy="DateCreated" OnClick="@SortBy" />
                    </td>
                    <td align="center">
                        <ButtonSortComponent Waiting="@waiting" Text="Criador" SortBy="CreatedBy" OnClick="@SortBy" />
                    </td>
                    <td></td>
                    <td></td>
                </tr>
                <!---->
            </thead>
            <tbody>
                @foreach (var entity in entityList)
                {
                    <tr>
                        <td>
                            <div style="font-size: smaller">@entity.Id</div>
                        </td>
                        <td>
                            <div style="font-size: smaller">@TextToDisplay(entity.Title)</div>
                        </td>
                        <td>
                            <div style="font-size: smaller">@TextToDisplay(entity.Description)</div>
                        </td>
                        <td align="center" style="font-size: smaller">
                            @Global.ConvertDateTimeToString(entity.DateCreated)
                        </td>
                        <td>
                            <div style="font-size: smaller">@entity.CreatedBy</div>
                        </td>
                        <td>
                            <button type="button"
                                class="btn btn-outline-primary"
                                data-toggle="tooltip"
                                data-placement="top"
                                data-bs-toggle="modal"
                                disabled="@waiting"
                                title="Baixar o documento"
                                @onclick="() => OnDownload(entity.Id)">
                                <i class="bi bi-cloud-download"></i>
                            </button>
                        </td>
                        <td>
                            <button type="button"
                                class="btn btn-outline-danger"
                                data-toggle="tooltip"
                                data-placement="top"
                                data-bs-toggle="modal"
                                disabled="@waiting"
                                title="Excluir"
                                @onclick="() => OnDelete(entity.Id)">
                                <i class="bi bi-x-lg"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
            <div class="btn-group" role="group" aria-label="First group">
            </div>
            <PageNavigationComponent CurrentPage="@currentPage" NumberOfPages="@numberOfPages" GotoPage="@OnPageChange"></PageNavigationComponent>
        </div>
    </article>
</section>

@code {
    [Inject]
    protected IJSRuntime JSRuntime { get; set; }
    [Inject]
    protected IInstituteService InstituteService { get; set; } = default!;
    [Inject]
    private IDocxStreamService docxStreamService { get; set; } = default!;
    [Inject]
    private IDownloadFileService downloadFileService { get; set; } = default!;

    protected List<DocxModel> entityList = new();

    protected bool ascendingSort = false;
    protected string? sort = "DateCreated";
    private string Name { get; set; } = default!;
    private string? Title { get; set; }
    private string? Source { get; set; }
    private string? Description { get; set; }
    private DateTime DateCreated { get; set; }

    protected DocxModel? entitySelected = null!;
    protected string previousName = string.Empty;
    protected string? previousTitle = string.Empty;
    protected string? previousSource = string.Empty;
    protected string? previousDescription = string.Empty;

    protected string? titleFilter = string.Empty;
    protected string? createdByFilter = string.Empty;
    protected string? descriptionFilter = string.Empty;
    protected string? dateCreatedFilter = string.Empty;
    protected string? contentTypeFilter = string.Empty;

    // protected bool EditEntityDialogIsOpen = false;

    private readonly int pageSize = 10;
    protected int currentPage = 0;
    protected int previousPage = -1;
    protected int nextPage = -1;
    protected int numberOfPages = 0;

    protected bool waiting = true;
    protected bool created = false;

    protected byte[] Data = default!;

    protected string TextToDisplay(string? text, int maxLength = 200)
        => text is not null && text.Length < maxLength ? text : text?.Substring(0, maxLength) + "...";

    private InstituteModel? institute;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            institute = await InstituteService.GetInstituteById(_userInstituteId);
            Guard.Against.Null(institute);

            // EditEntityDialogIsOpen = false;
            await PageRequest(currentPage);
        }
    }

    protected async Task OnPageChange(int page)
    {
        await PageRequest(page);
    }

#pragma warning disable CS8602
    protected async Task OnTitleChanged(ChangeEventArgs args)
    {
        titleFilter = args.Value.ToString();
        await PageRequest(0);
    }
    protected async Task OnDescriptionChanged(ChangeEventArgs args)
    {
        descriptionFilter = args.Value.ToString();
        await PageRequest(0);
    }
    protected async Task OnCreatedByChanged(ChangeEventArgs args)
    {
        createdByFilter = args.Value.ToString();
        await PageRequest(0);
    }
#pragma warning restore CS8602

    protected async void SortBy(string SortColumn)
    {
        ascendingSort = !ascendingSort;
        sort = SortColumn;
        await PageRequest(currentPage);
    }

    protected virtual async Task PageRequest(int page)
    {
        waiting = true;
        var message = await docxStreamService.GetDocxStreamPage(
            new GetDocxPageRequest(
                _userInstituteId,
                page,
                pageSize,
                sort,
                ascendingSort,
                titleFilter,
                descriptionFilter,
                contentTypeFilter,
                dateCreatedFilter,
                _userName
            )
        );

        if (message.IsSuccessStatusCode)
        {
            var content = await message.Content.ReadAsStringAsync();
            var tmp = JsonConvert.DeserializeObject<PageOfDocx>(content);
            Guard.Against.Null(tmp);
            entityList = tmp.Entities;
            currentPage = tmp.CurrentPage;
            previousPage = tmp.PreviousPage;
            nextPage = tmp.NextPage;
            numberOfPages = tmp.NumberOfPages;
        }
        else
        {
            var result = await message.Content.ReadAsStringAsync();
            var error = JsonConvert.DeserializeObject<ProblemDetails>(result);
            Guard.Against.Null(error);
            Guard.Against.Null(error.Title);
            _toasterService?.AddToastError(error.Title);
        }
        waiting = false;

        StateHasChanged();
    }

    protected async Task OnDownload(Guid id)
    {
        var model = await docxStreamService.GetDocxStreamById(id);

        if (model is not null)
        {
            using var writer = new BinaryWriter(File.OpenWrite($"D:\\Download\\{model.Id}.docx"));
            // using var writer = new BinaryWriter(File.OpenWrite("D:\\users\\clalu\\Source\\repos\\PraeceptorCQRS\\PraeceptorCQRS.Presentation\\DocumentToWord.Api\\Teste.docx"));
            writer.Write(model.Data);
            writer.Close();

            // // await downloadFileService.DownloadFileAsync($"{model.Id}.docx", model.Data, MimeTypeMap.GetMimeType(".docx"));
            // // Send the data to JS to actually download the file
            // await JSRuntime.InvokeVoidAsync("blazorDownloadFile", $"{model.Id}.docx", model.ContentType, model.Data);
            // // await JSRuntime.InvokeVoidAsync("blazorDownloadFile", $"{model.Id}.docx", model.ContentType, stream.GetBuffer());
            _toasterService?.AddToastSuccess($"Documento salvo como {model.Id}.docx");
        }
        else
        {
            _toasterService?.AddToastError("Não consegui ler o documento.");
        }
    }

    protected async Task OnDelete(Guid id)
    {
        var message = await docxStreamService.DeleteDocxStream(id);
        if (message.IsSuccessStatusCode)
        {
            entityList.Remove(entityList.Find(o => o.Id == id)!);
            _toasterService?.AddToastSuccess("o documento foi excluído com sucesso!");
        }
        else
        {
            var result = await message.Content.ReadAsStringAsync();
            var error = JsonConvert.DeserializeObject<ProblemDetails>(result);
            Guard.Against.Null(error);
            Guard.Against.Null(error.Title);
            _toasterService?.AddToastError(error.Title);
        }
    }

    // protected virtual async Task OnEditFileModelDialogClose(FileModel? model)
    // {
    //     if (model is not null)
    //     {
    //         waiting = true;
    // 
    //         HttpResponseMessage response;
    // 
    //         response = await fileStreamService.CreateFileStream(
    //             new CreateSqlFileStreamRequest(
    //                 model.Name,
    //                 model.Title,
    //                 model.Source,
    //                 model.Description,
    //                 model.Data,
    //                 model.ContentType,
    //                 _userInstituteId
    //             )
    //         );
    // 
    //         if (response.IsSuccessStatusCode)
    //         {
    //             var result = await response.Content.ReadAsStringAsync();
    //             _toasterService?.AddToastSuccess("As modificações foram salvas.");
    //             previousName = model.Name;
    //             previousTitle = model.Title;
    //             previousSource = model.Source;
    //             previousDescription = model.Description;
    //             await PageRequest(currentPage);
    //         }
    //         else
    //         {
    //             var result = await response.Content.ReadAsStringAsync();
    //             var error = JsonConvert.DeserializeObject<ProblemDetails>(result);
    //             Guard.Against.Null(error);
    //             Guard.Against.Null(error.Title);
    //             _toasterService?.AddToastError(error.Title);
    // 
    //             Guard.Against.Null(entitySelected);
    //             entitySelected.Name = previousName;
    //             entitySelected.Title = previousTitle;
    //             entitySelected.Source = previousSource;
    //             entitySelected.Description = previousDescription;
    //         }
    // 
    //         waiting = false;
    //     }
    // 
    //     EditEntityDialogIsOpen = false;
    // 
    //     StateHasChanged();
    // }
}
