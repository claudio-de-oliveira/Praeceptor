<TableRowComponent Key="@(Guid.Empty)" Cells="@header" 
                   OnCellChange="@OnCellChange" 
                   OnDeleteCell="@OnDeleteCell"
                   OnMoveToLeft="@OnMoveToLeft"
                   OnMoveToRight="@OnMoveToRight"></TableRowComponent>

<div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
    <div class="btn-group" role="group" aria-label="First group">
        <button type="button"
                class="btn btn-outline-primary"
                data-toggle="tooltip"
                data-placement="top"
                data-bs-toggle="modal"
                title="Criar uma nova coluna"
                @onclick="() => OnHeaderCreate.Invoke()">
            <i class="bi bi-plus-lg"></i>
            Criar uma nova coluna
        </button>
    </div>
</div>

@code {
    [Parameter]
    public string? Header { get; set; } = default!;
    [Parameter]
    public Action<string, bool> OnHeaderChanged { get; set; } = default!;
    [Parameter]
    public Action<int> OnDeleteColumn { get; set; } = default!;
    [Parameter]
    public Action OnHeaderCreate { get; set; } = default!;
    [Parameter]
    public Action<int> OnMoveToLeft { get; set; } = default!;
    [Parameter]
    public Action<int> OnMoveToRight { get; set; } = default!;

    private Dictionary<Guid, string> header { get; set; } = new();

    private void CreateDictionaryFromString(string? text, Dictionary<Guid, string> dictionary)
        => text?.Split('&').ToList().ForEach(o => dictionary.Add(Guid.NewGuid(), o.Trim()));

    private static string ConvertRowToString(List<string> row)
    {
        string str = "";
        for (int i = 0; i < row.Count - 1; i++)
            str += row[i] + " & ";
        str += row[^1];
        return str;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && Header is not null)
        {
            CreateDictionaryFromString(Header, header);
            StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }

    public void AddColumn()
    {
        header.Add(Guid.NewGuid(), "");
        StateHasChanged();
    }

    public void DeleteColumn(int index)
    {
        int i = 0;

        foreach (var key in header.Keys)
        {
            if (i == index)
            {
                header.Remove(key);
                break;
            }
            i++;
        }

        string str = ConvertRowToString(header.Values.ToList());
        OnHeaderChanged.Invoke(str, false);
        StateHasChanged();
    }

    public void OnDeleteCell(Guid rowKey, Guid columnKey)
    {
        int index = 0;

        foreach (var key in header.Keys)
        {
            if (key == columnKey)
                break;
            index++;
        }

        OnDeleteColumn.Invoke(index);
    }

    public void OnCellChange(Guid rowKey, Guid columnKey, string text)
    {
        header[columnKey] = text;
        string str = ConvertRowToString(header.Values.ToList());
        OnHeaderChanged.Invoke(str, true);
    }

    public void MoveToLeft(int column)
    {
        if (column > 0)
        {
            int index = 0;
            Guid previous = Guid.Empty;
            foreach (var key in header.Keys)
            {
                if (index == column)
                {
                    var tmp = header[key];
                    header[key] = header[previous];
                    header[previous] = tmp;
                    break;
                }
                index++;
                previous = key;
            }
            string str = ConvertRowToString(header.Values.ToList());
            OnHeaderChanged.Invoke(str, false);

            StateHasChanged();
        }
    }

    public void MoveToRight(int column)
    {
        if (column < header.Count - 1)
        { 
            int index = 0;
            Guid previous = Guid.Empty;
            foreach (var key in header.Keys)
            {
                if (index == column + 1)
                {
                    var tmp = header[key];
                    header[key] = header[previous];
                    header[previous] = tmp;
                    break;
                }
                index++;
                previous = key;
            }
            string str = ConvertRowToString(header.Values.ToList());
            OnHeaderChanged.Invoke(str, false);

            StateHasChanged();
        }
    }
}

