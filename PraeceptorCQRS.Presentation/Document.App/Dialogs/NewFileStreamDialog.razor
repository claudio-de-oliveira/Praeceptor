@using Ardalis.GuardClauses
@using Document.App.Components.Toaster

<div class="modal t-modal primary fade show"
     data-backdrop="static"
     aria-labelledby="staticBackdropLabel"
     aria-hidden="true"
     aria-modal="true"
     role="dialog">
    <div class="modal-dialog modal-dialog-scrollable modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Edite os campos desejáveis</h5>
            </div>
            <div class="modal-body">
                <div class="container">
                    <div class="form-group purple-border">
                        <form>
                            <div class="mb-3">
                                <label for="recipient-name" class="col-form-label">Nome</label>
                                <input type="text" class="form-control" @bind-value="@fileModel.Name" id="recipient-name" contenteditable="true">
                            </div>
                            <div class="mb-3">
                                <label for="recipient-title" class="col-form-label">Título</label>
                                <input type="text" class="form-control" @bind-value="@fileModel.Title" id="recipient-title" contenteditable="true">
                            </div>
                            <div class="mb-3">
                                <label for="message-source" class="col-form-label">Fonte</label>
                                <textarea type="text" class="form-control" @bind="@fileModel.Source" wrap="soft" id="message-source" rows="3" contenteditable="true"></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="message-description" class="col-form-label">Descrição</label>
                                <textarea type="text" class="form-control" @bind="@fileModel.Description" wrap="soft" id="message-description" rows="3" contenteditable="true"></textarea>
                            </div>

                            <!-- Para selecão de múltiplos arquivos -->
                            @*
                            @for (int i = 0; i < numberOfInputFiles; i++)
                            {
                            <InputFile @key="i" OnChange="OnFileChanged" style="@GetInputFileStyle(i)"></InputFile>
                            }
                            *@
                            <!-- Para selecão de arquivo único -->
                            <InputFile OnChange="OnFileChanged"></InputFile>

                            <div style="font-size:small;">
                                <pre>@status</pre>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button"
                        class="btn btn-outline-danger"
                        data-bs-dismiss="modal"
                        data-toggle="tooltip"
                        data-placement="top"
                        data-bs-toggle="modal"
                        data-bs-target="#editChapterModal"
                        title="Cuidado: As modificações serão perdidas"
                        @onclick="@(() => Cancel())">
                    Ignorar
                </button>
                <button type="button" class="btn btn-outline-primary" @onclick="@(async () => await Ok())">Salvar alterações</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject]
    protected ToasterService? _toasterService { get; set; }
    [Parameter]
    public EventCallback<FileModel?> OnClose { get; set; }

    private List<FileModel> fileList = new();

    private FileModel fileModel = new();

    string? status = "";

    #region Para selecão de múltiplos arquivos
    // int numberOfInputFiles = 1;

    // private string GetInputFileStyle(int index)
    // {
    //     return index == numberOfInputFiles - 1 ? "" : "display: none";
    // }
    #endregion

    private static async Task<byte[]> ReadTemplateFile(IBrowserFile file)
    {
        Stream fileStream = file.OpenReadStream(2 * 1024 * 1024);

        var data = new byte[fileStream.Length];
        var buffer = new byte[32000];
        int offset = 0;
        int count = await fileStream.ReadAsync(buffer);

        do
        {
            Array.Copy(buffer, 0, data, offset, count);
            offset += count;
            count = await fileStream.ReadAsync(buffer);
        }
        while (count > 0);

        fileStream.Close();

        return data;
    }

    #region Para selecão de múltiplos arquivos
    // private async Task OnFileChanged(InputFileChangeEventArgs e)
    // {
    //     // Create a new InputFile component
    //     numberOfInputFiles++;
    // 
    //     // Handle selected files
    //     try
    //     {
    //         // checar e.File
    //         foreach (var file in e.GetMultipleFiles(e.FileCount))
    //         {
    //             if (file.Size < 2 * 1024 * 1024)
    //             {
    //                 var buffer = await ReadTemplateFile(file);
    // 
    //                 string contentType;
    // 
    //                 contentType = (string.IsNullOrWhiteSpace(file.ContentType))
    //                     ? $"unknow/{file.Name.Split('.')[^1]}"
    //                     : contentType = file.ContentType;
    // 
    //                 fileModel.ContentType = contentType;
    //                 fileModel.Data = buffer;
    // 
    //                 status += $"\nO arquivo {file.Name} foi selecionado.";
    //             }
    //             else
    //             {
    //                 status += $"\n*** ERRO: O arquivo {file.Name} é muito grande. Tamanho máximo é de 2MB.";
    //             }
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         status += "\nERRO: " + ex.Message;
    //     }
    // 
    //     await InvokeAsync(StateHasChanged);
    // }
    #endregion

    #region Para selecão de arquivo único
    private async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        // Handle selected files
        try
        {
            if (e.File.Size < 2 * 1024 * 1024)
            {
                var buffer = await ReadTemplateFile(e.File);

                string contentType;

                contentType = (string.IsNullOrWhiteSpace(e.File.ContentType))
                        ? $"unknow/{e.File.Name.Split('.')[^1]}"
                        : contentType = e.File.ContentType;

                fileModel.ContentType = contentType;
                fileModel.Data = buffer;

                status += $"\nO arquivo {e.File.Name} foi selecionado.";
            }
            else
            {
                status += $"\nO arquivo {e.File.Name} é muito grande. Tamanho máximo é de 2MB.";
            }
        }
        catch (Exception ex)
        {
            status += "\n" + ex.Message;
        }

        await InvokeAsync(StateHasChanged);
    }
    #endregion

    private Task Cancel()
    {
        return OnClose.InvokeAsync(null);
    }

    private Task Ok()
    {
        return OnClose.InvokeAsync(fileModel);
    }
}
