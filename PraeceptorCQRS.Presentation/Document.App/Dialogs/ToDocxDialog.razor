@using Ardalis.GuardClauses;
@using Document.App.Components;
@using Document.App.Models;
@using Microsoft.AspNetCore.Mvc;
@using Newtonsoft.Json;
@using PraeceptorCQRS.Contracts.Entities.Course;
@using PraeceptorCQRS.Contracts.Entities.ToWord;

<div class="modal t-modal primary fade show"
     data-backdrop="static"
     aria-labelledby="staticBackdropLabel"
     aria-hidden="true"
     aria-modal="true"
     role="dialog">
    <div class="modal-dialog modal-dialog-scrollable modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Edite os campos desejáveis</h5>
            </div>
            <div class="modal-body">
                <div class="container">
                    <div class="form-group purple-border">
                        <form>
                            <div class="mb-3">
                                <label for="recipient-type" class="col-form-label">Selecione um Curso</label>
                                <select class="form-select" id="recipient-type" @bind="courseSelected" style="background-color:aliceblue;">
                                    @foreach (var course in Courses)
                                    {
                                        <option value=@course.Id>@course.Name (@course.Code)</option>
                                    }
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="recipient-name" class="col-form-label">Currículo</label>
                                <input type="number" class="form-control" @bind-value="@curriculum" id="recipient-name" contenteditable="true">
                            </div>
                            <div class="mb-3">
                                <label for="recipient-description" class="col-form-label">Descição</label>
                                <input type="text" class="form-control" @bind-value="@description" id="recipient-description" contenteditable="true">
                            </div>
                            <div class="mb-3">
                                <label for="recipient-name" class="col-form-label">Modelo de documento Word (.dotx)</label>
                                <select class="form-select" id="recipient-type" @bind="templateSelected" style="background-color:aliceblue;">
                                    @foreach (var template in Templates)
                                    {
                                        <option value=@template.Id>@template.Name (@template.DateCreated)</option>
                                    }
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="message-text" class="col-form-label">Variáveis</label>
                                <textarea type="text" class="form-control" @bind="@groupValues" wrap="soft" id="message-text" rows="15" contenteditable="true"></textarea>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button"
                        class="btn btn-outline-danger"
                        data-bs-dismiss="modal"
                        data-toggle="tooltip"
                        data-placement="top"
                        data-bs-toggle="modal"
                        data-bs-target="#editDocxModal"
                        title="Cuidado: As modificações serão perdidas"
                        @onclick="@(() => Cancel())">
                    Ignorar
                </button>
                <button type="button" class="btn btn-outline-primary" @onclick="@(async () => await Ok())">Salvar alterações</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<CourseModel> Courses { get; set; } = default!;
    [Parameter]
    public List<FileModel> Templates { get; set; } = default!;
    [Parameter]
    public EventCallback<ConvertPpcToDocxRequest?> OnClose { get; set; }

    private Guid courseSelected = Guid.Empty;
    private int curriculum = 0;
    private string description = "";
    private string groupValues = "";
    private Guid templateSelected = Guid.Empty;

    private Task Cancel()
    {
        return OnClose.InvokeAsync(null);
    }

    private Task Ok()
    {
        var gv = new Dictionary<string, string>();

        gv.Add("@Grupo.@Variavel", "Teste");

        Console.WriteLine($"Curso: {courseSelected}");
        Console.WriteLine($"Template: {templateSelected}");
        Console.WriteLine($"Currículo: {curriculum}");

        ConvertPpcToDocxRequest request = new(
            courseSelected,
            curriculum,
            description,
            Guid.Empty,
            templateSelected,
            Guid.NewGuid(),
            gv,
            ""
        );

        return OnClose.InvokeAsync(request);
    }
}
