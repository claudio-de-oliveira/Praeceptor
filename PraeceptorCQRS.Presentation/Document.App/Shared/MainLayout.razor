@inherits LayoutComponentBase

@using Ardalis.GuardClauses

<PageTitle>Document.App</PageTitle>

<!-- N A V B A R -->
<NavMenu />

<!-- B O D Y -->
@Body

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;

    private string authenticatedUserName = default!;
    private string authenticatedUserRole = default!;
    private char authenticatedUserGender = 'X';
    private Guid authenticatedInstituteId = Guid.Empty;
    private Guid authenticatedHoldingId = Guid.Empty;
    private Guid authenticatedCourseId = Guid.Empty;

    private string header2 =>
        (!string.IsNullOrEmpty(authenticatedUserName))
        ? (!string.IsNullOrEmpty(authenticatedUserRole))
            ? $"{authenticatedUserName} ({authenticatedUserRole})"
            : $"{authenticatedUserName}"
        : "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var principal = authState.User;

        if (principal.Identity is not null && principal.Identity.IsAuthenticated)
        {
            var claimName = principal.Claims.FirstOrDefault(c => c.Type == "name");
            Guard.Against.Null(claimName);
            authenticatedUserName = claimName.Value;
            var claimRole = principal.Claims.FirstOrDefault(c => c.Type == "role");
            Guard.Against.Null(claimRole);
            authenticatedUserRole = claimRole.Value;
            var claimGender = principal.Claims.FirstOrDefault(c => c.Type == "gender");
            Guard.Against.Null(claimGender);
            authenticatedUserGender = claimGender.Value[0];
            var claimInstituteId = principal.Claims.FirstOrDefault(c => c.Type == "instituteid");
            Guard.Against.Null(claimInstituteId);
            authenticatedInstituteId = Guid.Parse(claimInstituteId.Value);
            var claimHoldingId = principal.Claims.FirstOrDefault(c => c.Type == "holdingid");
            Guard.Against.Null(claimHoldingId);
            authenticatedHoldingId = Guid.Parse(claimHoldingId.Value);
            var claimCourseId = principal.Claims.FirstOrDefault(c => c.Type == "courseid");
            Guard.Against.Null(claimCourseId);
            authenticatedCourseId = Guid.Parse(claimCourseId.Value);
        }

        StateHasChanged();
    }
}

@*
<!-- S H O W C A S E -->
<section class="bg-dark text-light p-3 p-lg-0 pt-lg-3 text-center text-sm-start">
    <div class="container">
        <div class="d-sm-flex align-items-center justify-content-between">
            <h5>Crie <span class="text-warning">Planos Pedagógicos</span></h5>
        </div>
        <p class="lead my-4">
            Nós queremos ajudá-lo a construir e a manter <span class="text-warning">planos pedagógicos</span> de curso
        </p>
        <button class="btn-primary btn-lg">
            Mais informações
        </button>


        <img class="img-fluid w-25 d-none d-sm-block" src="images/showcase.svg" alt="" />
    </div>
</section>

<!-- N E W S L E T T E R -->
<section class="bg-primary text-light p-1">
    <div class="container">
        <div class="d-md-flex justify-content-between align-items-center">
            <h3 class="md-3 mb-md-0">Mais informações</h3>

            <div class="input-group news-input">
                <input type="text" class="form-control" placeholder="Email">
                <button class="btn btn-dark btn-lg " type="button">Enviar</button>
            </div>

        </div>
    </div>
</section>
*@
